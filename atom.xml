<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DingTing</title>
  <subtitle>土豆烧排骨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dandan32.github.io/"/>
  <updated>2017-04-19T11:33:22.000Z</updated>
  <id>http://dandan32.github.io/</id>
  
  <author>
    <name>pipi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyQt5_11 俄罗斯方块</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_11/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_11/</id>
    <published>2017-04-19T07:55:06.000Z</published>
    <updated>2017-04-19T11:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h1><p>俄罗斯方块是最流行的电脑游戏之一，1985年俄罗斯开发者 Alexey Pajitnov 开发出最初的原型。</p>
<p>六种基本形状</p>
<ul>
<li>S 形块</li>
<li>Z 形块</li>
<li>T 形块</li>
<li>L 形块</li>
<li>镜像L形块</li>
<li>线形块<br>每种形状都有四个方块组成，形状从上往下掉落，可以通过旋转改变形状的姿态，尽可能适应填满一行。如果填满一行，则该行删除获得相应分数。累积到顶部则游戏结束。</li>
</ul>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>通过绘图API绘制形状，电脑游戏背后都有一些数学模型，俄罗斯方块也是如此。一些思路</p>
<ul>
<li>使用QBasicTimer() 创建游戏循环</li>
<li>绘制形状</li>
<li>形状以方块移动，而不是像素。</li>
<li>模型化背板为数字的列表。</li>
</ul>
<p>代码由四个类组成：Tetris, Board, Tetrominoe 和 Shape。Tetris 类构建游戏，Board负责游戏逻辑，Tetrominoe表示所有的方块名字，Shape类表示方块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This is a Tetris game clone.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, random</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QFrame, QDesktopWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QBasicTimer, pyqtSignal</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetris</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>    </div><div class="line"></div><div class="line">        self.tboard = Board(self)</div><div class="line">        self.setCentralWidget(self.tboard)</div><div class="line"></div><div class="line">        self.statusbar = self.statusBar()        </div><div class="line">        self.tboard.msg2Statusbar[str].connect(self.statusbar.showMessage)</div><div class="line">        </div><div class="line">        self.tboard.start()</div><div class="line">        </div><div class="line">        self.resize(<span class="number">180</span>, <span class="number">380</span>)</div><div class="line">        self.center()</div><div class="line">        self.setWindowTitle(<span class="string">'Tetris'</span>)        </div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        screen = QDesktopWidget().screenGeometry()</div><div class="line">        size = self.geometry()</div><div class="line">        self.move((screen.width()-size.width())/<span class="number">2</span>, </div><div class="line">            (screen.height()-size.height())/<span class="number">2</span>)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span><span class="params">(QFrame)</span>:</span></div><div class="line">    </div><div class="line">    msg2Statusbar = pyqtSignal(str)</div><div class="line">    </div><div class="line">    BoardWidth = <span class="number">10</span></div><div class="line">    BoardHeight = <span class="number">22</span></div><div class="line">    Speed = <span class="number">300</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        super().__init__(parent)</div><div class="line">        </div><div class="line">        self.initBoard()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initBoard</span><span class="params">(self)</span>:</span>     </div><div class="line"></div><div class="line">        self.timer = QBasicTimer()</div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        </div><div class="line">        self.curX = <span class="number">0</span></div><div class="line">        self.curY = <span class="number">0</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.board = []</div><div class="line"></div><div class="line">        self.setFocusPolicy(Qt.StrongFocus)</div><div class="line">        self.isStarted = <span class="keyword">False</span></div><div class="line">        self.isPaused = <span class="keyword">False</span></div><div class="line">        self.clearBoard()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shapeAt</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.board[(y * Board.BoardWidth) + x]</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShapeAt</span><span class="params">(self, x, y, shape)</span>:</span></div><div class="line">        self.board[(y * Board.BoardWidth) + x] = shape</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareWidth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.contentsRect().width() // Board.BoardWidth</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareHeight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.contentsRect().height() // Board.BoardHeight</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isStarted = <span class="keyword">True</span></div><div class="line">        self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">        self.numLinesRemoved = <span class="number">0</span></div><div class="line">        self.clearBoard()</div><div class="line"></div><div class="line">        self.msg2Statusbar.emit(str(self.numLinesRemoved))</div><div class="line"></div><div class="line">        self.newPiece()</div><div class="line">        self.timer.start(Board.Speed, self)</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pause</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.isPaused = <span class="keyword">not</span> self.isPaused</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            self.timer.stop()</div><div class="line">            self.msg2Statusbar.emit(<span class="string">"paused"</span>)</div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.timer.start(Board.Speed, self)</div><div class="line">            self.msg2Statusbar.emit(str(self.numLinesRemoved))</div><div class="line"></div><div class="line">        self.update()</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        painter = QPainter(self)</div><div class="line">        rect = self.contentsRect()</div><div class="line"></div><div class="line">        boardTop = rect.bottom() - Board.BoardHeight * self.squareHeight()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                shape = self.shapeAt(j, Board.BoardHeight - i - <span class="number">1</span>)</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> shape != Tetrominoe.NoShape:</div><div class="line">                    self.drawSquare(painter,</div><div class="line">                        rect.left() + j * self.squareWidth(),</div><div class="line">                        boardTop + i * self.squareHeight(), shape)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.curPiece.shape() != Tetrominoe.NoShape:</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                </div><div class="line">                x = self.curX + self.curPiece.x(i)</div><div class="line">                y = self.curY - self.curPiece.y(i)</div><div class="line">                self.drawSquare(painter, rect.left() + x * self.squareWidth(),</div><div class="line">                    boardTop + (Board.BoardHeight - y - <span class="number">1</span>) * self.squareHeight(),</div><div class="line">                    self.curPiece.shape())</div><div class="line"></div><div class="line">                    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyPressEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isStarted <span class="keyword">or</span> self.curPiece.shape() == Tetrominoe.NoShape:</div><div class="line">            super(Board, self).keyPressEvent(event)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        key = event.key()</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> key == Qt.Key_P:</div><div class="line">            self.pause()</div><div class="line">            <span class="keyword">return</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> self.isPaused:</div><div class="line">            <span class="keyword">return</span></div><div class="line">                </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_Left:</div><div class="line">            self.tryMove(self.curPiece, self.curX - <span class="number">1</span>, self.curY)</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_Right:</div><div class="line">            self.tryMove(self.curPiece, self.curX + <span class="number">1</span>, self.curY)</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_Down:</div><div class="line">            self.tryMove(self.curPiece.rotateRight(), self.curX, self.curY)</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_Up:</div><div class="line">            self.tryMove(self.curPiece.rotateLeft(), self.curX, self.curY)</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_Space:</div><div class="line">            self.dropDown()</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> key == Qt.Key_D:</div><div class="line">            self.oneLineDown()</div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            super(Board, self).keyPressEvent(event)</div><div class="line">                </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timerEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> event.timerId() == self.timer.timerId():</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> self.isWaitingAfterLine:</div><div class="line">                self.isWaitingAfterLine = <span class="keyword">False</span></div><div class="line">                self.newPiece()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.oneLineDown()</div><div class="line">                </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            super(Board, self).timerEvent(event)</div><div class="line"></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearBoard</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight * Board.BoardWidth):</div><div class="line">            self.board.append(Tetrominoe.NoShape)</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dropDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        newY = self.curY</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> newY &gt; <span class="number">0</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, newY - <span class="number">1</span>):</div><div class="line">                <span class="keyword">break</span></div><div class="line">                </div><div class="line">            newY -= <span class="number">1</span></div><div class="line"></div><div class="line">        self.pieceDropped()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oneLineDown</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY - <span class="number">1</span>):</div><div class="line">            self.pieceDropped()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pieceDropped</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            x = self.curX + self.curPiece.x(i)</div><div class="line">            y = self.curY - self.curPiece.y(i)</div><div class="line">            self.setShapeAt(x, y, self.curPiece.shape())</div><div class="line"></div><div class="line">        self.removeFullLines()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.isWaitingAfterLine:</div><div class="line">            self.newPiece()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeFullLines</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        numFullLines = <span class="number">0</span></div><div class="line">        rowsToRemove = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(Board.BoardHeight):</div><div class="line">            </div><div class="line">            n = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.shapeAt(j, i) == Tetrominoe.NoShape:</div><div class="line">                    n = n + <span class="number">1</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> n == <span class="number">10</span>:</div><div class="line">                rowsToRemove.append(i)</div><div class="line"></div><div class="line">        rowsToRemove.reverse()</div><div class="line">        </div><div class="line"></div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> rowsToRemove:</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(m, Board.BoardHeight):</div><div class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> range(Board.BoardWidth):</div><div class="line">                        self.setShapeAt(l, k, self.shapeAt(l, k + <span class="number">1</span>))</div><div class="line"></div><div class="line">        numFullLines = numFullLines + len(rowsToRemove)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> numFullLines &gt; <span class="number">0</span>:</div><div class="line">            </div><div class="line">            self.numLinesRemoved = self.numLinesRemoved + numFullLines</div><div class="line">            self.msg2Statusbar.emit(str(self.numLinesRemoved))</div><div class="line">                </div><div class="line">            self.isWaitingAfterLine = <span class="keyword">True</span></div><div class="line">            self.curPiece.setShape(Tetrominoe.NoShape)</div><div class="line">            self.update()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newPiece</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.curPiece = Shape()</div><div class="line">        self.curPiece.setRandomShape()</div><div class="line">        self.curX = Board.BoardWidth // <span class="number">2</span> + <span class="number">1</span></div><div class="line">        self.curY = Board.BoardHeight - <span class="number">1</span> + self.curPiece.minY()</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tryMove(self.curPiece, self.curX, self.curY):</div><div class="line">            </div><div class="line">            self.curPiece.setShape(Tetrominoe.NoShape)</div><div class="line">            self.timer.stop()</div><div class="line">            self.isStarted = <span class="keyword">False</span></div><div class="line">            self.msg2Statusbar.emit(<span class="string">"Game over"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tryMove</span><span class="params">(self, newPiece, newX, newY)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            x = newX + newPiece.x(i)</div><div class="line">            y = newY - newPiece.y(i)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= Board.BoardWidth <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= Board.BoardHeight:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                </div><div class="line">            <span class="keyword">if</span> self.shapeAt(x, y) != Tetrominoe.NoShape:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.curPiece = newPiece</div><div class="line">        self.curX = newX</div><div class="line">        self.curY = newY</div><div class="line">        self.update()</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawSquare</span><span class="params">(self, painter, x, y, shape)</span>:</span></div><div class="line">        </div><div class="line">        colorTable = [<span class="number">0x000000</span>, <span class="number">0xCC6666</span>, <span class="number">0x66CC66</span>, <span class="number">0x6666CC</span>,</div><div class="line">                      <span class="number">0xCCCC66</span>, <span class="number">0xCC66CC</span>, <span class="number">0x66CCCC</span>, <span class="number">0xDAAA00</span>]</div><div class="line"></div><div class="line">        color = QColor(colorTable[shape])</div><div class="line">        painter.fillRect(x + <span class="number">1</span>, y + <span class="number">1</span>, self.squareWidth() - <span class="number">2</span>, </div><div class="line">            self.squareHeight() - <span class="number">2</span>, color)</div><div class="line"></div><div class="line">        painter.setPen(color.lighter())</div><div class="line">        painter.drawLine(x, y + self.squareHeight() - <span class="number">1</span>, x, y)</div><div class="line">        painter.drawLine(x, y, x + self.squareWidth() - <span class="number">1</span>, y)</div><div class="line"></div><div class="line">        painter.setPen(color.darker())</div><div class="line">        painter.drawLine(x + <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>,</div><div class="line">            x + self.squareWidth() - <span class="number">1</span>, y + self.squareHeight() - <span class="number">1</span>)</div><div class="line">        painter.drawLine(x + self.squareWidth() - <span class="number">1</span>, </div><div class="line">            y + self.squareHeight() - <span class="number">1</span>, x + self.squareWidth() - <span class="number">1</span>, y + <span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetrominoe</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    NoShape = <span class="number">0</span></div><div class="line">    ZShape = <span class="number">1</span></div><div class="line">    SShape = <span class="number">2</span></div><div class="line">    LineShape = <span class="number">3</span></div><div class="line">    TShape = <span class="number">4</span></div><div class="line">    SquareShape = <span class="number">5</span></div><div class="line">    LShape = <span class="number">6</span></div><div class="line">    MirroredLShape = <span class="number">7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    coordsTable = (</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">0</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">-1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">0</span>, <span class="number">2</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">0</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">1</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>),     (<span class="number">1</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">-1</span>, <span class="number">-1</span>),   (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>)),</div><div class="line">        ((<span class="number">1</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">-1</span>),    (<span class="number">0</span>, <span class="number">0</span>),     (<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.coords = [[<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">        self.pieceShape = Tetrominoe.NoShape</div><div class="line"></div><div class="line">        self.setShape(Tetrominoe.NoShape)</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shape</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.pieceShape</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShape</span><span class="params">(self, shape)</span>:</span></div><div class="line">        </div><div class="line">        table = Shape.coordsTable[shape]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</div><div class="line">                self.coords[i][j] = table[i][j]</div><div class="line"></div><div class="line">        self.pieceShape = shape</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setRandomShape</span><span class="params">(self)</span>:</span></div><div class="line">        self.setShape(random.randint(<span class="number">1</span>, <span class="number">7</span>))</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">0</span>]</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.coords[index][<span class="number">1</span>]</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setX</span><span class="params">(self, index, x)</span>:</span></div><div class="line">        self.coords[index][<span class="number">0</span>] = x</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setY</span><span class="params">(self, index, y)</span>:</span></div><div class="line">        self.coords[index][<span class="number">1</span>] = y</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxX</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = min(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxY</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        m = self.coords[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            m = max(m, self.coords[i][<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> m</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateLeft</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoe.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            result.setX(i, self.y(i))</div><div class="line">            result.setY(i, -self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.pieceShape == Tetrominoe.SquareShape:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line"></div><div class="line">        result = Shape()</div><div class="line">        result.pieceShape = self.pieceShape</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            </div><div class="line">            result.setX(i, -self.y(i))</div><div class="line">            result.setY(i, self.x(i))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication([])</div><div class="line">    tetris = Tetris()    </div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;俄罗斯方块&quot;&gt;&lt;a href=&quot;#俄罗斯方块&quot; class=&quot;headerlink&quot; title=&quot;俄罗斯方块&quot;&gt;&lt;/a&gt;俄罗斯方块&lt;/h1&gt;&lt;p&gt;俄罗斯方块是最流行的电脑游戏之一，1985年俄罗斯开发者 Alexey Pajitnov 开发出最初的原型。&lt;/p&gt;
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5_10 自定义部件【Custom widgets in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_10/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_10/</id>
    <published>2017-04-19T07:55:04.000Z</published>
    <updated>2017-04-19T08:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt5 有一系列空间，然而开发者可能有某些特殊的需要。通常只提供最基本的部件，比如：按钮、文本、滚动条等。如果需要更特殊的部件，可以自行创建。通过绘图工具自定义部件，两种可能的方法，开发者可以定义、增强部件 或者自己创建一个部件。</p>
<h1 id="Burning-widget"><a href="#Burning-widget" class="headerlink" title="Burning widget"></a>Burning widget</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we create a custom widget.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QSlider, QApplication, </div><div class="line">    QHBoxLayout, QVBoxLayout)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject, Qt, pyqtSignal</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QFont, QColor, QPen</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Communicate</span><span class="params">(QObject)</span>:</span></div><div class="line">    </div><div class="line">    updateBW = pyqtSignal(int)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurningWidget</span><span class="params">(QWidget)</span>:</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>      </div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.setMinimumSize(<span class="number">1</span>, <span class="number">30</span>)</div><div class="line">        self.value = <span class="number">75</span></div><div class="line">        self.num = [<span class="number">75</span>, <span class="number">150</span>, <span class="number">225</span>, <span class="number">300</span>, <span class="number">375</span>, <span class="number">450</span>, <span class="number">525</span>, <span class="number">600</span>, <span class="number">675</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setValue</span><span class="params">(self, value)</span>:</span></div><div class="line"></div><div class="line">        self.value = value</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">      </div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawWidget(qp)</div><div class="line">        qp.end()</div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawWidget</span><span class="params">(self, qp)</span>:</span></div><div class="line">      </div><div class="line">        font = QFont(<span class="string">'Serif'</span>, <span class="number">7</span>, QFont.Light)</div><div class="line">        qp.setFont(font)</div><div class="line"></div><div class="line">        size = self.size()</div><div class="line">        w = size.width()</div><div class="line">        h = size.height()</div><div class="line"></div><div class="line">        step = int(round(w / <span class="number">10.0</span>))</div><div class="line"></div><div class="line"></div><div class="line">        till = int(((w / <span class="number">750.0</span>) * self.value))</div><div class="line">        full = int(((w / <span class="number">750.0</span>) * <span class="number">700</span>))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.value &gt;= <span class="number">700</span>:</div><div class="line">            </div><div class="line">            qp.setPen(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line">            qp.setBrush(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">184</span>))</div><div class="line">            qp.drawRect(<span class="number">0</span>, <span class="number">0</span>, full, h)</div><div class="line">            qp.setPen(QColor(<span class="number">255</span>, <span class="number">175</span>, <span class="number">175</span>))</div><div class="line">            qp.setBrush(QColor(<span class="number">255</span>, <span class="number">175</span>, <span class="number">175</span>))</div><div class="line">            qp.drawRect(full, <span class="number">0</span>, till-full, h)</div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            </div><div class="line">            qp.setPen(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line">            qp.setBrush(QColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">184</span>))</div><div class="line">            qp.drawRect(<span class="number">0</span>, <span class="number">0</span>, till, h)</div><div class="line"></div><div class="line"></div><div class="line">        pen = QPen(QColor(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>), <span class="number">1</span>, </div><div class="line">            Qt.SolidLine)</div><div class="line">            </div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.setBrush(Qt.NoBrush)</div><div class="line">        qp.drawRect(<span class="number">0</span>, <span class="number">0</span>, w<span class="number">-1</span>, h<span class="number">-1</span>)</div><div class="line"></div><div class="line">        j = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(step, <span class="number">10</span>*step, step):</div><div class="line">          </div><div class="line">            qp.drawLine(i, <span class="number">0</span>, i, <span class="number">5</span>)</div><div class="line">            metrics = qp.fontMetrics()</div><div class="line">            fw = metrics.width(str(self.num[j]))</div><div class="line">            qp.drawText(i-fw/<span class="number">2</span>, h/<span class="number">2</span>, str(self.num[j]))</div><div class="line">            j = j + <span class="number">1</span></div><div class="line">            </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        sld = QSlider(Qt.Horizontal, self)</div><div class="line">        sld.setFocusPolicy(Qt.NoFocus)</div><div class="line">        sld.setRange(<span class="number">1</span>, <span class="number">750</span>)</div><div class="line">        sld.setValue(<span class="number">75</span>)</div><div class="line">        sld.setGeometry(<span class="number">30</span>, <span class="number">40</span>, <span class="number">150</span>, <span class="number">30</span>)</div><div class="line"></div><div class="line">        self.c = Communicate()        </div><div class="line">        self.wid = BurningWidget()</div><div class="line">        self.c.updateBW[int].connect(self.wid.setValue)</div><div class="line"></div><div class="line">        sld.valueChanged[int].connect(self.changeValue)</div><div class="line">        hbox = QHBoxLayout()</div><div class="line">        hbox.addWidget(self.wid)</div><div class="line">        vbox = QVBoxLayout()</div><div class="line">        vbox.addStretch(<span class="number">1</span>)</div><div class="line">        vbox.addLayout(hbox)</div><div class="line">        self.setLayout(vbox)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">390</span>, <span class="number">210</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Burning widget'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changeValue</span><span class="params">(self, value)</span>:</span></div><div class="line">             </div><div class="line">        self.c.updateBW.emit(value)        </div><div class="line">        self.wid.repaint()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_10_1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyQt5 有一系列空间，然而开发者可能有某些特殊的需要。通常只提供最基本的部件，比如：按钮、文本、滚动条等。如果需要更特殊的部件，可以自行创建。通过绘图工具自定义部件，两种可能的方法，开发者可以定义、增强部件 或者自己创建一个部件。&lt;/p&gt;
&lt;h1 id=&quot;Burning
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-9  绘图 【Painting in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_9/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_9/</id>
    <published>2017-04-19T07:50:58.000Z</published>
    <updated>2017-04-19T08:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt5 绘图系统能够渲染矢量图、图片、艺术字。绘图对于改变或增强现有部件功能很重要，使用内建的绘图api进行绘制。<br>绘制由paintEvent()方法完成。绘制代码放置在QPainter对象的begin()方法和end()方法中。</p>
<h1 id="绘制文本【Drawing-text】"><a href="#绘制文本【Drawing-text】" class="headerlink" title="绘制文本【Drawing text】"></a>绘制文本【Drawing text】</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we draw text in Russian azbuka.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: September 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QFont</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.text = <span class="string">u'\u041b\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\</span></div><div class="line">\u0435\u0432\u0438\u0447 \u0422\u043e\u043b\u0441\u0442\u043e\u0439: \n\</div><div class="line">\u0410\u043d\u043d\u0430 \u041a\u0430\u0440\u0435\u043d\u0438\u043d\u0430'</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Draw text'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></div><div class="line"></div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawText(event, qp)</div><div class="line">        qp.end()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawText</span><span class="params">(self, event, qp)</span>:</span></div><div class="line">      </div><div class="line">        qp.setPen(QColor(<span class="number">168</span>, <span class="number">34</span>, <span class="number">3</span>))</div><div class="line">        qp.setFont(QFont(<span class="string">'Decorative'</span>, <span class="number">10</span>))</div><div class="line">        qp.drawText(event.rect(), Qt.AlignCenter, self.text)        </div><div class="line">                </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_9_1.png" alt=""></p>
<h1 id="画点-【Drawing-points】"><a href="#画点-【Drawing-points】" class="headerlink" title="画点 【Drawing points】"></a>画点 【Drawing points】</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In the example, we draw randomly 1000 red points </div><div class="line">on the window.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, random</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QPen</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Points'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, e)</span>:</span></div><div class="line"></div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawPoints(qp)</div><div class="line">        qp.end()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawPoints</span><span class="params">(self, qp)</span>:</span></div><div class="line">      </div><div class="line">        qp.setPen(Qt.red)</div><div class="line">        size = self.size()</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">            x = random.randint(<span class="number">1</span>, size.width()<span class="number">-1</span>)</div><div class="line">            y = random.randint(<span class="number">1</span>, size.height()<span class="number">-1</span>)</div><div class="line">            qp.drawPoint(x, y)     </div><div class="line">                </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_9_2.png" alt=""></p>
<h1 id="颜色-【colours】"><a href="#颜色-【colours】" class="headerlink" title="颜色 【colours】"></a>颜色 【colours】</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example draws three rectangles in three</div><div class="line">#different colours. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QBrush</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">100</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Colours'</span>)</div><div class="line">        self.show()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, e)</span>:</span></div><div class="line"></div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawRectangles(qp)</div><div class="line">        qp.end()</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawRectangles</span><span class="params">(self, qp)</span>:</span></div><div class="line">      </div><div class="line">        col = QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">        col.setNamedColor(<span class="string">'#d4d4d4'</span>)</div><div class="line">        qp.setPen(col)</div><div class="line"></div><div class="line">        qp.setBrush(QColor(<span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        qp.setBrush(QColor(<span class="number">255</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">160</span>))</div><div class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        qp.setBrush(QColor(<span class="number">25</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">200</span>))</div><div class="line">        qp.drawRect(<span class="number">250</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line">              </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_9_3.png" alt=""></p>
<h1 id="QPen"><a href="#QPen" class="headerlink" title="QPen"></a>QPen</h1><p>QPen 是基本的图形对象，可以用户画线、曲线、举行的轮廓、阴影、几何图形和其他形状。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example we draw 6 lines using</div><div class="line">different pen styles. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QPen</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">270</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Pen styles'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, e)</span>:</span></div><div class="line"></div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawLines(qp)</div><div class="line">        qp.end()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawLines</span><span class="params">(self, qp)</span>:</span></div><div class="line">      </div><div class="line">        pen = QPen(Qt.black, <span class="number">2</span>, Qt.SolidLine)</div><div class="line"></div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">250</span>, <span class="number">40</span>)</div><div class="line"></div><div class="line">        pen.setStyle(Qt.DashLine)</div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">80</span>)</div><div class="line"></div><div class="line">        pen.setStyle(Qt.DashDotLine)</div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>)</div><div class="line"></div><div class="line">        pen.setStyle(Qt.DotLine)</div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">160</span>)</div><div class="line"></div><div class="line">        pen.setStyle(Qt.DashDotDotLine)</div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">200</span>)</div><div class="line"></div><div class="line">        pen.setStyle(Qt.CustomDashLine)</div><div class="line">        pen.setDashPattern([<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>])</div><div class="line">        qp.setPen(pen)</div><div class="line">        qp.drawLine(<span class="number">20</span>, <span class="number">240</span>, <span class="number">250</span>, <span class="number">240</span>)</div><div class="line">              </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_9_4.png" alt=""></p>
<h1 id="QBrush"><a href="#QBrush" class="headerlink" title="QBrush"></a>QBrush</h1><p>QBrush 是基本的图形对象，用于图形的背景绘制</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example draws 9 rectangles in different</div><div class="line">brush styles.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: July 2016</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QBrush</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">355</span>, <span class="number">280</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Brushes'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, e)</span>:</span></div><div class="line"></div><div class="line">        qp = QPainter()</div><div class="line">        qp.begin(self)</div><div class="line">        self.drawBrushes(qp)</div><div class="line">        qp.end()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawBrushes</span><span class="params">(self, qp)</span>:</span></div><div class="line">      </div><div class="line">        brush = QBrush(Qt.SolidPattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.Dense1Pattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.Dense2Pattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">250</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.DiagCrossPattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.Dense5Pattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.Dense6Pattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">250</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.HorPattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">195</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.VerPattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">195</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        brush.setStyle(Qt.BDiagPattern)</div><div class="line">        qp.setBrush(brush)</div><div class="line">        qp.drawRect(<span class="number">250</span>, <span class="number">195</span>, <span class="number">90</span>, <span class="number">60</span>)</div><div class="line">              </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_9_5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyQt5 绘图系统能够渲染矢量图、图片、艺术字。绘图对于改变或增强现有部件功能很重要，使用内建的绘图api进行绘制。&lt;br&gt;绘制由paintEvent()方法完成。绘制代码放置在QPainter对象的begin()方法和end()方法中。&lt;/p&gt;
&lt;h1 id=&quot;绘制文本
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-8 小部件II 【widgets II】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_8/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_8/</id>
    <published>2017-04-19T07:44:41.000Z</published>
    <updated>2017-04-19T08:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>widgets 用法例子，不含解释。</p>
<h1 id="QPixmap"><a href="#QPixmap" class="headerlink" title="QPixmap"></a>QPixmap</h1><p>在屏幕上显示图片。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we dispay an image</div><div class="line">on the window. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QHBoxLayout, </div><div class="line">    QLabel, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        hbox = QHBoxLayout(self)</div><div class="line">        pixmap = QPixmap(<span class="string">"redrock.png"</span>)</div><div class="line"></div><div class="line">        lbl = QLabel(self)</div><div class="line">        lbl.setPixmap(pixmap)</div><div class="line"></div><div class="line">        hbox.addWidget(lbl)</div><div class="line">        self.setLayout(hbox)</div><div class="line">        </div><div class="line">        self.move(<span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Red Rock'</span>)</div><div class="line">        self.show()        </div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h1><p>单行编辑框</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows text which </div><div class="line">is entered in a QLineEdit</div><div class="line">in a QLabel widget.</div><div class="line"> </div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QLabel, </div><div class="line">    QLineEdit, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.lbl = QLabel(self)</div><div class="line">        qle = QLineEdit(self)</div><div class="line">        </div><div class="line">        qle.move(<span class="number">60</span>, <span class="number">100</span>)</div><div class="line">        self.lbl.move(<span class="number">60</span>, <span class="number">40</span>)</div><div class="line"></div><div class="line">        qle.textChanged[str].connect(self.onChanged)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QLineEdit'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onChanged</span><span class="params">(self, text)</span>:</span></div><div class="line">        </div><div class="line">        self.lbl.setText(text)</div><div class="line">        self.lbl.adjustSize()        </div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QSplitter"><a href="#QSplitter" class="headerlink" title="QSplitter"></a>QSplitter</h1><p>将区域分割，切分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows</div><div class="line">how to use QSplitter widget.</div><div class="line"> </div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QHBoxLayout, QFrame, </div><div class="line">    QSplitter, QStyleFactory, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        hbox = QHBoxLayout(self)</div><div class="line"></div><div class="line">        topleft = QFrame(self)</div><div class="line">        topleft.setFrameShape(QFrame.StyledPanel)</div><div class="line"> </div><div class="line">        topright = QFrame(self)</div><div class="line">        topright.setFrameShape(QFrame.StyledPanel)</div><div class="line"></div><div class="line">        bottom = QFrame(self)</div><div class="line">        bottom.setFrameShape(QFrame.StyledPanel)</div><div class="line"></div><div class="line">        splitter1 = QSplitter(Qt.Horizontal)</div><div class="line">        splitter1.addWidget(topleft)</div><div class="line">        splitter1.addWidget(topright)</div><div class="line"></div><div class="line">        splitter2 = QSplitter(Qt.Vertical)</div><div class="line">        splitter2.addWidget(splitter1)</div><div class="line">        splitter2.addWidget(bottom)</div><div class="line"></div><div class="line">        hbox.addWidget(splitter2)</div><div class="line">        self.setLayout(hbox)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QSplitter'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onChanged</span><span class="params">(self, text)</span>:</span></div><div class="line">        </div><div class="line">        self.lbl.setText(text)</div><div class="line">        self.lbl.adjustSize()        </div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QComboBox"><a href="#QComboBox" class="headerlink" title="QComboBox"></a>QComboBox</h1><p>下拉列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows how to use </div><div class="line">a QComboBox widget.</div><div class="line"> </div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QLabel, </div><div class="line">    QComboBox, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.lbl = QLabel(<span class="string">"Ubuntu"</span>, self)</div><div class="line"></div><div class="line">        combo = QComboBox(self)</div><div class="line">        combo.addItem(<span class="string">"Ubuntu"</span>)</div><div class="line">        combo.addItem(<span class="string">"Mandriva"</span>)</div><div class="line">        combo.addItem(<span class="string">"Fedora"</span>)</div><div class="line">        combo.addItem(<span class="string">"Arch"</span>)</div><div class="line">        combo.addItem(<span class="string">"Gentoo"</span>)</div><div class="line"></div><div class="line">        combo.move(<span class="number">50</span>, <span class="number">50</span>)</div><div class="line">        self.lbl.move(<span class="number">50</span>, <span class="number">150</span>)</div><div class="line"></div><div class="line">        combo.activated[str].connect(self.onActivated)        </div><div class="line">         </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QComboBox'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onActivated</span><span class="params">(self, text)</span>:</span></div><div class="line">      </div><div class="line">        self.lbl.setText(text)</div><div class="line">        self.lbl.adjustSize()  </div><div class="line">        </div><div class="line">                </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;widgets 用法例子，不含解释。&lt;/p&gt;
&lt;h1 id=&quot;QPixmap&quot;&gt;&lt;a href=&quot;#QPixmap&quot; class=&quot;headerlink&quot; title=&quot;QPixmap&quot;&gt;&lt;/a&gt;QPixmap&lt;/h1&gt;&lt;p&gt;在屏幕上显示图片。&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-7 小部件 【widgets】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_7/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_7/</id>
    <published>2017-04-19T07:32:16.000Z</published>
    <updated>2017-04-19T07:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>小部件 是应用的基础构建块。PyQt5 具备一系列不同的小部件，包括：按钮、多选按钮、滚动条、列表。此教程中，将探讨几个常用的部件，QCheckBox、ToggleButton、QSlider、QProgressBar、QCalendarWidget。</p>
<p>widgets 用法例子，不含解释</p>
<h1 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h1><p>多选按钮，具备开启、关闭两种状态。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, a QCheckBox widget</div><div class="line">is used to toggle the title of a window.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QCheckBox, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        cb = QCheckBox(<span class="string">'Show title'</span>, self)</div><div class="line">        cb.move(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">        cb.toggle()</div><div class="line">        cb.stateChanged.connect(self.changeTitle)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QCheckBox'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changeTitle</span><span class="params">(self, state)</span>:</span></div><div class="line">      </div><div class="line">        <span class="keyword">if</span> state == Qt.Checked:</div><div class="line">            self.setWindowTitle(<span class="string">'QCheckBox'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.setWindowTitle(<span class="string">''</span>)</div><div class="line">            </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<h1 id="Toggle-button"><a href="#Toggle-button" class="headerlink" title="Toggle button"></a>Toggle button</h1><p>Toggle button 是具备press和not press 两种状态的按钮。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we create three toggle buttons.</div><div class="line">They will control the background color of a </div><div class="line">QFrame. </div><div class="line"></div><div class="line">Author: Jan Bodnar</div><div class="line">Website: zetcode.com </div><div class="line">Last edited: November 2016</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QPushButton, </div><div class="line">    QFrame, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QColor</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.col = QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)       </div><div class="line"></div><div class="line">        redb = QPushButton(<span class="string">'Red'</span>, self)</div><div class="line">        redb.setCheckable(<span class="keyword">True</span>)</div><div class="line">        redb.move(<span class="number">10</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line">        redb.clicked[bool].connect(self.setColor)</div><div class="line"></div><div class="line">        greenb = QPushButton(<span class="string">'Green'</span>, self)</div><div class="line">        greenb.setCheckable(<span class="keyword">True</span>)</div><div class="line">        greenb.move(<span class="number">10</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        greenb.clicked[bool].connect(self.setColor)</div><div class="line"></div><div class="line">        blueb = QPushButton(<span class="string">'Blue'</span>, self)</div><div class="line">        blueb.setCheckable(<span class="keyword">True</span>)</div><div class="line">        blueb.move(<span class="number">10</span>, <span class="number">110</span>)</div><div class="line"></div><div class="line">        blueb.clicked[bool].connect(self.setColor)</div><div class="line"></div><div class="line">        self.square = QFrame(self)</div><div class="line">        self.square.setGeometry(<span class="number">150</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        self.square.setStyleSheet(<span class="string">"QWidget &#123; background-color: %s &#125;"</span> %  </div><div class="line">            self.col.name())</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Toggle button'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setColor</span><span class="params">(self, pressed)</span>:</span></div><div class="line">        </div><div class="line">        source = self.sender()</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> pressed:</div><div class="line">            val = <span class="number">255</span></div><div class="line">        <span class="keyword">else</span>: val = <span class="number">0</span></div><div class="line">                        </div><div class="line">        <span class="keyword">if</span> source.text() == <span class="string">"Red"</span>:</div><div class="line">            self.col.setRed(val)                </div><div class="line">        <span class="keyword">elif</span> source.text() == <span class="string">"Green"</span>:</div><div class="line">            self.col.setGreen(val)             </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.col.setBlue(val) </div><div class="line">            </div><div class="line">        self.square.setStyleSheet(<span class="string">"QFrame &#123; background-color: %s &#125;"</span> %</div><div class="line">            self.col.name())  </div><div class="line">       </div><div class="line">       </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QSlider"><a href="#QSlider" class="headerlink" title="QSlider"></a>QSlider</h1><p>QSlider 滚动条</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows a QSlider widget.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QSlider, </div><div class="line">    QLabel, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        sld = QSlider(Qt.Horizontal, self)</div><div class="line">        sld.setFocusPolicy(Qt.NoFocus)</div><div class="line">        sld.setGeometry(<span class="number">30</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">30</span>)</div><div class="line">        sld.valueChanged[int].connect(self.changeValue)</div><div class="line">        </div><div class="line">        self.label = QLabel(self)</div><div class="line">        self.label.setPixmap(QPixmap(<span class="string">'mute.png'</span>))</div><div class="line">        self.label.setGeometry(<span class="number">160</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">30</span>)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QSlider'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changeValue</span><span class="params">(self, value)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> value == <span class="number">0</span>:</div><div class="line">            self.label.setPixmap(QPixmap(<span class="string">'mute.png'</span>))</div><div class="line">        <span class="keyword">elif</span> value &gt; <span class="number">0</span> <span class="keyword">and</span> value &lt;= <span class="number">30</span>:</div><div class="line">            self.label.setPixmap(QPixmap(<span class="string">'min.png'</span>))</div><div class="line">        <span class="keyword">elif</span> value &gt; <span class="number">30</span> <span class="keyword">and</span> value &lt; <span class="number">80</span>:</div><div class="line">            self.label.setPixmap(QPixmap(<span class="string">'med.png'</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.label.setPixmap(QPixmap(<span class="string">'max.png'</span>))</div><div class="line">            </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QProgressBar"><a href="#QProgressBar" class="headerlink" title="QProgressBar"></a>QProgressBar</h1><p>进度条</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows a QProgressBar widget.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QProgressBar, </div><div class="line">    QPushButton, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QBasicTimer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.pbar = QProgressBar(self)</div><div class="line">        self.pbar.setGeometry(<span class="number">30</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">25</span>)</div><div class="line"></div><div class="line">        self.btn = QPushButton(<span class="string">'Start'</span>, self)</div><div class="line">        self.btn.move(<span class="number">40</span>, <span class="number">80</span>)</div><div class="line">        self.btn.clicked.connect(self.doAction)</div><div class="line"></div><div class="line">        self.timer = QBasicTimer()</div><div class="line">        self.step = <span class="number">0</span></div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'QProgressBar'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timerEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">      </div><div class="line">        <span class="keyword">if</span> self.step &gt;= <span class="number">100</span>:</div><div class="line">            self.timer.stop()</div><div class="line">            self.btn.setText(<span class="string">'Finished'</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">            </div><div class="line">        self.step = self.step + <span class="number">1</span></div><div class="line">        self.pbar.setValue(self.step)</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doAction</span><span class="params">(self)</span>:</span></div><div class="line">      </div><div class="line">        <span class="keyword">if</span> self.timer.isActive():</div><div class="line">            self.timer.stop()</div><div class="line">            self.btn.setText(<span class="string">'Start'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.timer.start(<span class="number">100</span>, self)</div><div class="line">            self.btn.setText(<span class="string">'Stop'</span>)</div><div class="line">            </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QCalendarWidget"><a href="#QCalendarWidget" class="headerlink" title="QCalendarWidget"></a>QCalendarWidget</h1><p>日期</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows a QCalendarWidget widget.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QCalendarWidget, </div><div class="line">    QLabel, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QDate</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        cal = QCalendarWidget(self)</div><div class="line">        cal.setGridVisible(<span class="keyword">True</span>)</div><div class="line">        cal.move(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">        cal.clicked[QDate].connect(self.showDate)</div><div class="line">        </div><div class="line">        self.lbl = QLabel(self)</div><div class="line">        date = cal.selectedDate()</div><div class="line">        self.lbl.setText(date.toString())</div><div class="line">        self.lbl.move(<span class="number">130</span>, <span class="number">260</span>)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Calendar'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDate</span><span class="params">(self, date)</span>:</span>     </div><div class="line">        </div><div class="line">        self.lbl.setText(date.toString())</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小部件 是应用的基础构建块。PyQt5 具备一系列不同的小部件，包括：按钮、多选按钮、滚动条、列表。此教程中，将探讨几个常用的部件，QCheckBox、ToggleButton、QSlider、QProgressBar、QCalendarWidget。&lt;/p&gt;
&lt;p&gt;wid
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-6 对话框 【Dialogs in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_6/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_6/</id>
    <published>2017-04-19T07:11:52.000Z</published>
    <updated>2017-04-19T07:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>对话框窗口</em> 或 <em>对话框</em> 是现代GUI应用中不可或缺的部分。对话框是人之间的对话，在计算机中，对话框是用于与应用交互的窗口。对话框用于输入数据、定义数据、改变应用设置等。</p>
<h1 id="QInputDialog"><a href="#QInputDialog" class="headerlink" title="QInputDialog"></a>QInputDialog</h1><p>QInputDialog 提供简便地从用户获取单值的方法。输入值可以是string、数字 或 列表的一项。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we receive data from</div><div class="line">a QInputDialog dialog. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QPushButton, QLineEdit, </div><div class="line">    QInputDialog, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.btn = QPushButton(<span class="string">'Dialog'</span>, self)</div><div class="line">        self.btn.move(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">        self.btn.clicked.connect(self.showDialog)</div><div class="line">        </div><div class="line">        self.le = QLineEdit(self)</div><div class="line">        self.le.move(<span class="number">130</span>, <span class="number">22</span>)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">290</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Input dialog'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        text, ok = QInputDialog.getText(self, <span class="string">'Input Dialog'</span>, </div><div class="line">            <span class="string">'Enter your name:'</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> ok:</div><div class="line">            self.le.setText(str(text))</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/PyQt/PyQt_5_6_1.png" alt=""></p>
<h1 id="QColorDialog"><a href="#QColorDialog" class="headerlink" title="QColorDialog"></a>QColorDialog</h1><p>用于选择颜色的对话框</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we select a color value</div><div class="line">from the QColorDialog and change the background</div><div class="line">color of a QFrame widget. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QPushButton, QFrame, </div><div class="line">    QColorDialog, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QColor</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        col = QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) </div><div class="line"></div><div class="line">        self.btn = QPushButton(<span class="string">'Dialog'</span>, self)</div><div class="line">        self.btn.move(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line">        self.btn.clicked.connect(self.showDialog)</div><div class="line"></div><div class="line">        self.frm = QFrame(self)</div><div class="line">        self.frm.setStyleSheet(<span class="string">"QWidget &#123; background-color: %s &#125;"</span> </div><div class="line">            % col.name())</div><div class="line">        self.frm.setGeometry(<span class="number">130</span>, <span class="number">22</span>, <span class="number">100</span>, <span class="number">100</span>)            </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">180</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Color dialog'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></div><div class="line">      </div><div class="line">        col = QColorDialog.getColor()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> col.isValid():</div><div class="line">            self.frm.setStyleSheet(<span class="string">"QWidget &#123; background-color: %s &#125;"</span></div><div class="line">                % col.name())</div><div class="line">            </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QFontDialog"><a href="#QFontDialog" class="headerlink" title="QFontDialog"></a>QFontDialog</h1><p>字体对话框</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we select a font name</div><div class="line">and change the font of a label. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QVBoxLayout, QPushButton, </div><div class="line">    QSizePolicy, QLabel, QFontDialog, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        vbox = QVBoxLayout()</div><div class="line"></div><div class="line">        btn = QPushButton(<span class="string">'Dialog'</span>, self)</div><div class="line">        btn.setSizePolicy(QSizePolicy.Fixed,</div><div class="line">            QSizePolicy.Fixed)</div><div class="line">        </div><div class="line">        btn.move(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line">        vbox.addWidget(btn)</div><div class="line"></div><div class="line">        btn.clicked.connect(self.showDialog)</div><div class="line">        </div><div class="line">        self.lbl = QLabel(<span class="string">'Knowledge only matters'</span>, self)</div><div class="line">        self.lbl.move(<span class="number">130</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line">        vbox.addWidget(self.lbl)</div><div class="line">        self.setLayout(vbox)          </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">180</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Font dialog'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        font, ok = QFontDialog.getFont()</div><div class="line">        <span class="keyword">if</span> ok:</div><div class="line">            self.lbl.setFont(font)</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<h1 id="QFileDialog"><a href="#QFileDialog" class="headerlink" title="QFileDialog"></a>QFileDialog</h1><p>文件对话框，选择文件或路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we select a file with a</div><div class="line">QFileDialog and display its contents</div><div class="line">in a QTextEdit.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QMainWindow, QTextEdit, </div><div class="line">    QAction, QFileDialog, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.textEdit = QTextEdit()</div><div class="line">        self.setCentralWidget(self.textEdit)</div><div class="line">        self.statusBar()</div><div class="line"></div><div class="line">        openFile = QAction(QIcon(<span class="string">'open.png'</span>), <span class="string">'Open'</span>, self)</div><div class="line">        openFile.setShortcut(<span class="string">'Ctrl+O'</span>)</div><div class="line">        openFile.setStatusTip(<span class="string">'Open new File'</span>)</div><div class="line">        openFile.triggered.connect(self.showDialog)</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'&amp;File'</span>)</div><div class="line">        fileMenu.addAction(openFile)       </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'File dialog'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        fname = QFileDialog.getOpenFileName(self, <span class="string">'Open file'</span>, <span class="string">'/home'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>]:</div><div class="line">            f = open(fname[<span class="number">0</span>], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">with</span> f:</div><div class="line">                data = f.read()</div><div class="line">                self.textEdit.setText(data)        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;对话框窗口&lt;/em&gt; 或 &lt;em&gt;对话框&lt;/em&gt; 是现代GUI应用中不可或缺的部分。对话框是人之间的对话，在计算机中，对话框是用于与应用交互的窗口。对话框用于输入数据、定义数据、改变应用设置等。&lt;/p&gt;
&lt;h1 id=&quot;QInputDialog&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-5 事件和信号【Events and signals in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/04/19/PyQt5_5/"/>
    <id>http://dandan32.github.io/2017/04/19/PyQt5_5/</id>
    <published>2017-04-19T06:08:55.000Z</published>
    <updated>2017-04-19T08:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>这部分的将介绍PyQt5应用中的事件和信号处理。</p>
<h1 id="事件【Events】"><a href="#事件【Events】" class="headerlink" title="事件【Events】"></a>事件【Events】</h1><p>所有的 <em>GUI</em> 应用都是事件驱动的。事件主要是由应用的用户产生，也可通过其他方法产生，比如：英特网连接、窗口管理器、定时器。当调用应用的exec_() 方法，应用进入主循环，主循环接受事件送往对应的处理对象。</p>
<p>事件模型中，三个组成部分：</p>
<ul>
<li>事件源</li>
<li>事件对象</li>
<li>事件目标</li>
</ul>
<p><em>事件源</em>是状态改变的对象，由其产生事件。<em>事件对象（事件）</em>代表<em>事件源</em>的状态改变。<em>事件目标</em>是需要被通知发生变化的对象。<em>事件源</em>将事件处理委托给<em>事件目标</em></p>
<p>PyQt5 使用独特的信号、槽机制处理事件。信号、槽用于与对象通信，当事件发生时便产生一个信号，槽可以是Python可调用对象。当信号产生时，其对应连接的槽将被调用。</p>
<h1 id="信号、槽【Signals-amp-slots】"><a href="#信号、槽【Signals-amp-slots】" class="headerlink" title="信号、槽【Signals &amp; slots】"></a>信号、槽【Signals &amp; slots】</h1><p>例子：在PyQt5 中使用信号、槽<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we connect a signal</div><div class="line">of a QSlider to a slot of a QLCDNumber. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QLCDNumber, QSlider, </div><div class="line">    QVBoxLayout, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        lcd = QLCDNumber(self)</div><div class="line">        sld = QSlider(Qt.Horizontal, self)</div><div class="line"></div><div class="line">        vbox = QVBoxLayout()</div><div class="line">        vbox.addWidget(lcd)</div><div class="line">        vbox.addWidget(sld)</div><div class="line"></div><div class="line">        self.setLayout(vbox)</div><div class="line">        sld.valueChanged.connect(lcd.display)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Signal &amp; slot'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<p>例子中含有QLCDNumber 和 QSlider ，通过此句代码拖动滚动条改变lcd的显示。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sld.valueChanged.connect(lcd.display)</div></pre></td></tr></table></figure>
<p>将 valueChanged 信号与 Slider display 槽函数绑定。</p>
<p>发送者是发送信号的对象。接受者是接受信号的对象，槽是对信号做出反应的方法。</p>
<p><img src="/images/PyQt/PyQt_5_5_1.png" alt=""></p>
<h1 id="实现事件处理器-【Reimplementing-event-handler】"><a href="#实现事件处理器-【Reimplementing-event-handler】" class="headerlink" title="实现事件处理器 【Reimplementing event handler】"></a>实现事件处理器 【Reimplementing event handler】</h1><p>PyQt5 中的事件处理经常需要重新实现事件处理器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we reimplement an </div><div class="line">event handler. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Event handler'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyPressEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> e.key() == Qt.Key_Escape:</div><div class="line">            self.close()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>实现了按键处理器，<em>keyPressEvent</em></p>
<h1 id="事件发送者-【Event-sender】"><a href="#事件发送者-【Event-sender】" class="headerlink" title="事件发送者 【Event sender】"></a>事件发送者 【Event sender】</h1><p>某些时候，知道信号的发送者很有帮助，因此PqQt5提供了sender()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we determine the event sender</div><div class="line">object.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QPushButton, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        btn1 = QPushButton(<span class="string">"Button 1"</span>, self)</div><div class="line">        btn1.move(<span class="number">30</span>, <span class="number">50</span>)</div><div class="line"></div><div class="line">        btn2 = QPushButton(<span class="string">"Button 2"</span>, self)</div><div class="line">        btn2.move(<span class="number">150</span>, <span class="number">50</span>)</div><div class="line">      </div><div class="line">        btn1.clicked.connect(self.buttonClicked)            </div><div class="line">        btn2.clicked.connect(self.buttonClicked)</div><div class="line">        </div><div class="line">        self.statusBar()</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">290</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Event sender'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonClicked</span><span class="params">(self)</span>:</span></div><div class="line">      </div><div class="line">        sender = self.sender()</div><div class="line">        self.statusBar().showMessage(sender.text() + <span class="string">' was pressed'</span>)</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>本例中有两个按钮，buttonClicked()方法通过sender确定是谁发生了点击事件。</p>
<p><img src="/images/PyQt/PyQt_5_5_2.png" alt=""></p>
<h1 id="触发信号【Emitting-signals】"><a href="#触发信号【Emitting-signals】" class="headerlink" title="触发信号【Emitting signals】"></a>触发信号【Emitting signals】</h1><p>展示如何自定义触发信号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we show how to emit a</div><div class="line">signal. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal, QObject</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Communicate</span><span class="params">(QObject)</span>:</span></div><div class="line">    </div><div class="line">    closeApp = pyqtSignal() </div><div class="line">    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>      </div><div class="line"></div><div class="line">        self.c = Communicate()</div><div class="line">        self.c.closeApp.connect(self.close)       </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">290</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Emit signal'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        self.c.closeApp.emit()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>创建一个 closeApp 信号，当鼠标键入时信号触发。此信号与close槽方法相连。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.c = Communicate()</div><div class="line">self.c.closeApp.connect(self.close)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分的将介绍PyQt5应用中的事件和信号处理。&lt;/p&gt;
&lt;h1 id=&quot;事件【Events】&quot;&gt;&lt;a href=&quot;#事件【Events】&quot; class=&quot;headerlink&quot; title=&quot;事件【Events】&quot;&gt;&lt;/a&gt;事件【Events】&lt;/h1&gt;&lt;p&gt;所有的 &lt;e
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>machine_learning</title>
    <link href="http://dandan32.github.io/2017/04/14/machine_learning/"/>
    <id>http://dandan32.github.io/2017/04/14/machine_learning/</id>
    <published>2017-04-14T02:53:34.000Z</published>
    <updated>2017-04-14T03:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>normalization、standardization、regularization 定义区别<br><a href="http://blog.csdn.net/zyf89531/article/details/45922151" target="_blank" rel="external">http://blog.csdn.net/zyf89531/article/details/45922151</a></p>
<p>feature map<br><a href="https://www.zhihu.com/question/31318081" target="_blank" rel="external">https://www.zhihu.com/question/31318081</a></p>
<p>local response normalization<br><a href="https://www.quora.com/What-is-local-response-normalization" target="_blank" rel="external">https://www.quora.com/What-is-local-response-normalization</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;normalization、standardization、regularization 定义区别&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/zyf89531/article/details/45922151&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>腾讯面试</title>
    <link href="http://dandan32.github.io/2017/04/11/interview_tencent/"/>
    <id>http://dandan32.github.io/2017/04/11/interview_tencent/</id>
    <published>2017-04-11T14:05:41.000Z</published>
    <updated>2017-04-12T14:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>早上大概9:30到的面试现场，签到等候的时候，心里在默默复习面试可能常问的问题。<br>大概10:15分开始进去面试。一开始看到面试官，心情比较紧张，也不知到待会儿面试官会问<br>我些什么呢。谨慎的递上简历后，简历官看了下我的简历。开始问我项目经历，科研方面的<br>问题，还好都是自己做过的东西，介绍起来很轻松，怎么做的怎么说就是了。后来问了下学<br>习和算法，面试官还想考察下我的代码功底，可惜，有些项目没有传到github上。</p>
<p>面试官对机器人挺感兴趣的，谈话中涉及到很多机器人方面的内容，还有机器学习上的一些<br>问题。面试官感觉很亲切，像大哥哥一样。体验很好的一次面试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早上大概9:30到的面试现场，签到等候的时候，心里在默默复习面试可能常问的问题。&lt;br&gt;大概10:15分开始进去面试。一开始看到面试官，心情比较紧张，也不知到待会儿面试官会问&lt;br&gt;我些什么呢。谨慎的递上简历后，简历官看了下我的简历。开始问我项目经历，科研方面的&lt;br&gt;问题
    
    </summary>
    
      <category term="面试" scheme="http://dandan32.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://dandan32.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>操作系统面试</title>
    <link href="http://dandan32.github.io/2017/04/10/interview_operatingsystem/"/>
    <id>http://dandan32.github.io/2017/04/10/interview_operatingsystem/</id>
    <published>2017-04-10T04:41:31.000Z</published>
    <updated>2017-04-10T05:06:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程、线程、协程、管程"><a href="#进程、线程、协程、管程" class="headerlink" title="进程、线程、协程、管程"></a>进程、线程、协程、管程</h1><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><ol>
<li>文件、锁</li>
<li>管道（半双工、父子进程间使用）</li>
<li>命名管道fifo（半双工、可以在无亲缘关系进程间通信）</li>
<li>信号量  </li>
<li>信号  </li>
<li>消息队列  </li>
<li>共享内存  </li>
<li>套接字  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;进程、线程、协程、管程&quot;&gt;&lt;a href=&quot;#进程、线程、协程、管程&quot; class=&quot;headerlink&quot; title=&quot;进程、线程、协程、管程&quot;&gt;&lt;/a&gt;进程、线程、协程、管程&lt;/h1&gt;&lt;h1 id=&quot;进程间通信&quot;&gt;&lt;a href=&quot;#进程间通信&quot; class
    
    </summary>
    
      <category term="操作系统" scheme="http://dandan32.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://dandan32.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识点目录</title>
    <link href="http://dandan32.github.io/2017/04/06/java_index/"/>
    <id>http://dandan32.github.io/2017/04/06/java_index/</id>
    <published>2017-04-06T11:36:18.000Z</published>
    <updated>2017-04-07T08:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p>
<ol>
<li><p><a href="http://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="external">《The Java® Virtual Machine Specification(Java SE 8 Edition)》</a><br><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/index.html" target="_blank" rel="external">《Java 虚拟机规范(Java SE 7)》</a><br><a href="http://icyfenix.iteye.com/blog/1256329" target="_blank" rel="external">中文版本</a><br>Java 虚拟机规范 </p>
</li>
<li><p><a href="http://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="external">《The Java® Virtual Machine Specification(Java SE 8 Edition)》</a><br><a href="http://docs.oracle.com/javase/specs/jls/se7/html/index.html" target="_blank" rel="external">《The Java Language Specification,Java SE 7 Edition》</a><br>Java 语言规范  </p>
</li>
<li><p>《Oracle JRockit The Definitive Guide》<br> oracle 出品 JRockit 虚拟机高级使用指南， 2010年7月出版</p>
</li>
<li><p>《Inside the Java 2 Virtual Machine,Second Edition》<br> 2000年1月出版，</p>
</li>
<li><p>《Java Performance》<br> 只有第3、4、7 章与Java虚拟机相关，是从操作系统到基于Java的上层程序性能度量和调优的全面介绍，其中设计Java虚拟机的内容具备一定的深度和可实践性。  </p>
</li>
<li>高级语言虚拟机圈子： 高级语言虚拟机圈子：<a href="http://hllvm.group.iteye.com/" target="_blank" rel="external">http://hllvm.group.iteye.com/</a></li>
</ol>
<h1 id="Java-体系结构"><a href="#Java-体系结构" class="headerlink" title="Java 体系结构"></a>Java 体系结构</h1><p>传统意义上，Sun官方定义的Java 体系结构包括：</p>
<ul>
<li>Java 程序设计语言</li>
<li>Java 虚拟机</li>
<li>Class 文件格式</li>
<li>Java API 类库</li>
</ul>
<h1 id="Jdk-与-JRE-的关系"><a href="#Jdk-与-JRE-的关系" class="headerlink" title="Jdk 与 JRE 的关系"></a>Jdk 与 JRE 的关系</h1><p><img src="/images/JavaBasic/1.png" alt=""></p>
<h1 id="Java-的4个版本"><a href="#Java-的4个版本" class="headerlink" title="Java 的4个版本"></a>Java 的4个版本</h1><ul>
<li>Java Card：支持Java小程序(Applets)运行在小内存设备上。</li>
<li>Java ME ： 对Java API 有所精简，加入对移动设备的支持。</li>
<li>Java SE ： 提供完整的Java 核心 API，桌面级应用。</li>
<li>Java EE ： 企业开发，在Java SE API 之外，增加了大量的扩充并提供了相关的部署支持。</li>
</ul>
<p><em>扩展一般以javax.\</em>作为包名， 以java.<em> 为包名的都是Java SE API，后来历史发展，一部分扩展包也被划分为核心包了，所以部分核心包也以javax.</em>为包名*</p>
<h1 id="Java-发展"><a href="#Java-发展" class="headerlink" title="Java 发展"></a>Java 发展</h1><p>JDK 1.2 中细分为J2EE\J2SE\J2ME三个方向，内置了Classic VM、Hotspot VM、Exact VM(只在solaris平台上)，后两个VM 内置 JIT 编译器。添加了 strictfp 关键字与collections 集合类。</p>
<p>JDK 1.3 主要改进了类库，JNDI 开始作为一项平台级服务提供，使用 CORBA IIOP 实现 RMI 通信协议， 改进了Java2D API, 新增JavaSound类库。</p>
<p>JDK 1.4 Java走向成熟的标志！新特性：正则表达式、异常链、NIO、日志类、XML解析器、XSLT转换器等。</p>
<p>JDK 1.5 主要改进易用性，出现的新特性主要有：自动装箱、泛型、动态注解、枚举、可变长参数、遍历循环(foreach)。在虚拟机和API上，改进了Java的内存模型、提供了java.util.concurrent并发包。</p>
<p>JDK 1.6 转为 Java EE、 Java SE、 Java ME 的命名方式。提供动态语言支持（内置 mozilla JavaScript rhino引擎），提供编译API 和 微型HTTP服务器API等，同时对Java虚拟机内部改动：锁与同步、垃圾收集、类加载等方面。</p>
<p>JDK 1.7 新的G1收集器、加强对非Java语言的调用支持，升级类加载架构等。</p>
<p>JDK 1.8 特性：接口添加非抽象的方法实现(default 关键字)、Lambda表达式、函数式接口、方法构造函数引用、全新的日期API、多重注解。</p>
<h1 id="Java-虚拟机发展"><a href="#Java-虚拟机发展" class="headerlink" title="Java 虚拟机发展"></a>Java 虚拟机发展</h1><h2 id="Sun-Classic-VM-Exact-VM"><a href="#Sun-Classic-VM-Exact-VM" class="headerlink" title="Sun Classic VM/Exact VM"></a>Sun Classic VM/Exact VM</h2><p>Classic VM刚开始不提供JIT编译器，后来通过外挂的方式提供JIT编译器。JIT编译器会完全接管虚拟机的执行系统，解释器和JIT编译器不能同时工作。VM的虚拟机，它的执行系统已经具备现代高性能虚拟机的雏形：如两级即时编译器、编译器与解释器混合工作模式等。Exact VM因它使用准确式内存管理（Exact Memory Management，也可以叫Non-Conservative/Accurate Memory Management）而得名，即虚拟机可以知道内存中某个位置的数据具体是什么类型。  </p>
<h2 id="Hotspot-VM"><a href="#Hotspot-VM" class="headerlink" title="Hotspot VM"></a>Hotspot VM</h2><p>优点：热点代码探测技术、JIT编译器、混合的运行时系统。后与JRockit vm 整合，添加JRockit的垃圾回收器、MissionControl服务。</p>
<h2 id="Sun-Mobile-Embedded-VM-Meta-Circular-VM"><a href="#Sun-Mobile-Embedded-VM-Meta-Circular-VM" class="headerlink" title="Sun Mobile-Embedded VM\Meta-Circular VM"></a>Sun Mobile-Embedded VM\Meta-Circular VM</h2><p>移动设备上的 VM</p>
<h2 id="BEA-JRockit-IBM-J9-VM"><a href="#BEA-JRockit-IBM-J9-VM" class="headerlink" title="BEA JRockit\IBM J9 VM"></a>BEA JRockit\IBM J9 VM</h2><h2 id="Azul-VM-BEA-Liquid-VM"><a href="#Azul-VM-BEA-Liquid-VM" class="headerlink" title="Azul VM\BEA Liquid VM"></a>Azul VM\BEA Liquid VM</h2><p>Azul VM 专有系统上的VM，Azul systems 公司的 Zing JVM 提供接近Vega系统的特性。 </p>
<p>Liquid VM 不需要操作系统的支持，越过操作系统直接控制硬件。</p>
<h2 id="Apache-Harmony-Dalvik-VM"><a href="#Apache-Harmony-Dalvik-VM" class="headerlink" title="Apache Harmony\ Dalvik VM"></a>Apache Harmony\ Dalvik VM</h2><p>这两个都不算正规的VM</p>
<h2 id="Microsoft-JVM"><a href="#Microsoft-JVM" class="headerlink" title="Microsoft JVM"></a>Microsoft JVM</h2><p>微软的JVM 为了在IE 中支持Java小程序，后来抛弃不开发了。</p>
<h1 id="混合语言"><a href="#混合语言" class="headerlink" title="混合语言"></a>混合语言</h1><p>Clojure、JRuby、Java、Groovy</p>
<h1 id="多核并行"><a href="#多核并行" class="headerlink" title="多核并行"></a>多核并行</h1><p>JDK 1.7 加入的包java.util.concurrent.forkjoin 扩充了并发框架java.util.concurrent。fork/join 模式！</p>
<p>Sumatra 项目提供java接入cpu运算能力的工具。</p>
<h1 id="64位虚拟机"><a href="#64位虚拟机" class="headerlink" title="64位虚拟机"></a>64位虚拟机</h1><p>64位虚拟机性能比32位差？感觉很奇怪。64位的优点是能够提供更大的内存空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《The Java® Vi
    
    </summary>
    
      <category term="java" scheme="http://dandan32.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://dandan32.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>珠海宽德科技面试</title>
    <link href="http://dandan32.github.io/2017/04/05/interview_wizardquant/"/>
    <id>http://dandan32.github.io/2017/04/05/interview_wizardquant/</id>
    <published>2017-04-05T14:04:42.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>面试过程</p>
<ol>
<li>介绍个人的项目经验</li>
<li>java、操作系统、python等基础知识点</li>
</ol>
<h1 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h1><p>简单和面试官介绍了下个人的项目经验，说的并不好，还是需要练习，各种项目指标细节我都没有谈到，只是简单说了下个人负责的功能。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol>
<li><p>Java 反射能够实现什么？</p>
</li>
<li><p>Java gc 如何确定对象需要被清除？</p>
</li>
<li><p>Java gc 为什么要分成老年代和新生代？</p>
</li>
<li><p>volatile 修饰符作用？ synchronized修饰符作用？</p>
</li>
<li><p>Java 无锁类型？ 这个没听清</p>
</li>
</ol>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><ol>
<li><p>cpu 调度方式</p>
</li>
<li><p>父子进程fork后共享什么？</p>
</li>
<li><p>进程和线程的区别？</p>
</li>
<li><p>进程间通信有几种？</p>
</li>
<li><p>子进程 fork 后进程空间，CopyOnWrite！！！</p>
</li>
</ol>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><ol>
<li><p>set 是怎么实现的？</p>
</li>
<li><p>如何求 set 的交集？</p>
</li>
</ol>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol>
<li><p>如何实现读写分离？ </p>
</li>
<li><p>数据库实现同步方式。</p>
</li>
</ol>
<p>问的都挺基础，自己没搞清楚。。。<br>应该也跪了！<br>回家养猪，养猪~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介绍个人的项目经验&lt;/li&gt;
&lt;li&gt;java、操作系统、python等基础知识点&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;项目经验&quot;&gt;&lt;a href=&quot;#项目经验&quot; class=&quot;headerlink&quot; title=&quot;项目经验&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="面试" scheme="http://dandan32.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://dandan32.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>珠海习悦面试</title>
    <link href="http://dandan32.github.io/2017/04/05/interview_thinkjoy/"/>
    <id>http://dandan32.github.io/2017/04/05/interview_thinkjoy/</id>
    <published>2017-04-05T12:27:47.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次略感神奇的面试经历~<br>上来先自我介绍了一下<br>然后介绍在做的深度学习抓取物体的实验，介绍个人的深度学习方面看的论文、学习实践情况等</p>
<p>有点囧啊，其他的问题都没问。。。<br>第一次想主动和面试官说说话！！！<br>可能面试官没面试过几次？<br>也许吧</p>
<p>后来也没什么消息了，好像进了人才库，什么鬼嘛，想找个实习难了。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次略感神奇的面试经历~&lt;br&gt;上来先自我介绍了一下&lt;br&gt;然后介绍在做的深度学习抓取物体的实验，介绍个人的深度学习方面看的论文、学习实践情况等&lt;/p&gt;
&lt;p&gt;有点囧啊，其他的问题都没问。。。&lt;br&gt;第一次想主动和面试官说说话！！！&lt;br&gt;可能面试官没面试过几次？&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://dandan32.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://dandan32.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-4 布局管理【Layout management in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/04/04/PyQt5_4/"/>
    <id>http://dandan32.github.io/2017/04/04/PyQt5_4/</id>
    <published>2017-04-04T07:42:35.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文出处:</em> <a href="http://zetcode.com/gui/pyqt5/layout/" target="_blank" rel="external">zetcode.com</a>  </p>
<p>布局管理是GUI 编程一个重要的方面。布局管理是如何在窗口中安排部件的方法。可以通过设置绝对位置、或使用布局类这两种基本方式管理布局。</p>
<h1 id="绝对布局【Absolute-positioning】"><a href="#绝对布局【Absolute-positioning】" class="headerlink" title="绝对布局【Absolute positioning】"></a>绝对布局【Absolute positioning】</h1><p>在像素级别设置每个部件的位置和大小。当使用绝对布局时，需要理解以下的限制：</p>
<ul>
<li>当改变窗口大小的时候，部件的大小和位置不能更改。</li>
<li>应用也许在不同平台上显示效果不一致。</li>
<li>改变应用的字体也许会毁掉布局。</li>
<li>如果决定改变布局，需要重新设计布局，非常消耗时间、乏味</li>
</ul>
<p>下面的例子将按绝对布局放置widgets<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows three labels on a window</div><div class="line">using absolute positioning. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QLabel, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        lbl1 = QLabel(<span class="string">'Zetcode'</span>, self)</div><div class="line">        lbl1.move(<span class="number">15</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line">        lbl2 = QLabel(<span class="string">'tutorials'</span>, self)</div><div class="line">        lbl2.move(<span class="number">35</span>, <span class="number">40</span>)</div><div class="line">        </div><div class="line">        lbl3 = QLabel(<span class="string">'for programmers'</span>, self)</div><div class="line">        lbl3.move(<span class="number">55</span>, <span class="number">70</span>)        </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Absolute'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<p>使用 move（）方法设置widgets 的位置。 本例子中的widgets都是label，通过设置（x，y） 坐标设置其位置。坐标系统的原点位于左上角。x坐标轴方向由左向右，y坐标轴由上向下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lbl1 = QLabel(<span class="string">'Zetcode'</span>, self)</div><div class="line">lbl1.move(<span class="number">15</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>label widget 位置是 x=15, y = 10</p>
<p><img src="/images/PyQt/PyQt5_4_1.png" alt=""></p>
<h1 id="盒式布局-【Box-layout】"><a href="#盒式布局-【Box-layout】" class="headerlink" title="盒式布局 【Box layout】"></a>盒式布局 【Box layout】</h1><p>布局类管理布局更加灵活和实际。<strong>QHBoxLayout</strong> 和 <strong>QVBoxLayout</strong> 是使weigets 成水平、垂直排列的基类。</p>
<p>Imagine that we wanted to place two buttons in the right bottom corner. To create such a layout, we will use one horizontal and one vertical box. To create the necessary space, we will add a stretch factor.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">okButton = QPushButton(<span class="string">"OK"</span>)  </div><div class="line">cancelButton = QPushButton(<span class="string">"Cancel"</span>)</div></pre></td></tr></table></figure>
<p>创建两个按钮<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hbox = QHBoxLayout()</div><div class="line">hbox.addStretch(<span class="number">1</span>)</div><div class="line">hbox.addWidget(okButton)</div><div class="line">hbox.addWidget(cancelButton)</div></pre></td></tr></table></figure></p>
<p>创建水平布局并添加stretch因子和两个按钮。stretch 添加在两个按钮之前一个可伸缩空间，能够使两个按钮移动到窗口右边。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vbox = QVBoxLayout()</div><div class="line">vbox.addStretch(<span class="number">1</span>)</div><div class="line">vbox.addLayout(hbox)</div></pre></td></tr></table></figure>
<p>创建一个垂直布局，添加stretch 和 hbox布局，stretch 会令hbox 位于窗口的底部。<br>最后，效果如下：</p>
<p><img src="/images/PyQt/PyQt5_4_2.png" alt="">  </p>
<h1 id="栅格布局-【QGridLayout】"><a href="#栅格布局-【QGridLayout】" class="headerlink" title="栅格布局 【QGridLayout】"></a>栅格布局 【QGridLayout】</h1><p>最通用的布局类是栅格布局，按行列的方式分割空间。QGridLayout 实现了栅格布局。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we create a skeleton</div><div class="line">of a calculator using a QGridLayout.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QGridLayout, </div><div class="line">    QPushButton, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        grid = QGridLayout()</div><div class="line">        self.setLayout(grid)</div><div class="line"> </div><div class="line">        names = [<span class="string">'Cls'</span>, <span class="string">'Bck'</span>, <span class="string">''</span>, <span class="string">'Close'</span>,</div><div class="line">                 <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'/'</span>,</div><div class="line">                <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'*'</span>,</div><div class="line">                 <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'-'</span>,</div><div class="line">                <span class="string">'0'</span>, <span class="string">'.'</span>, <span class="string">'='</span>, <span class="string">'+'</span>]</div><div class="line">        </div><div class="line">        positions = [(i,j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> position, name <span class="keyword">in</span> zip(positions, names):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> name == <span class="string">''</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            button = QPushButton(name)</div><div class="line">            grid.addWidget(button, *position)</div><div class="line">            </div><div class="line">        self.move(<span class="number">300</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Calculator'</span>)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>声明在grid中的位置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> position, name <span class="keyword">in</span> zip(positions, names):</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> name == <span class="string">''</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    button = QPushButton(name)</div><div class="line">    grid.addWidget(button, *position)</div></pre></td></tr></table></figure>
<p>效果如：  </p>
<p><img src="/images/PyQt/PyQt5_4_3.png" alt=""></p>
<h1 id="Review-example"><a href="#Review-example" class="headerlink" title="Review example"></a>Review example</h1><p>在grid 布局中，widgets 可以横垮多个行列。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we create a bit</div><div class="line">more complicated window layout using</div><div class="line">the QGridLayout manager. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QLabel, QLineEdit, </div><div class="line">    QTextEdit, QGridLayout, QApplication)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        title = QLabel(<span class="string">'Title'</span>)</div><div class="line">        author = QLabel(<span class="string">'Author'</span>)</div><div class="line">        review = QLabel(<span class="string">'Review'</span>)</div><div class="line"></div><div class="line">        titleEdit = QLineEdit()</div><div class="line">        authorEdit = QLineEdit()</div><div class="line">        reviewEdit = QTextEdit()</div><div class="line"></div><div class="line">        grid = QGridLayout()</div><div class="line">        grid.setSpacing(<span class="number">10</span>)</div><div class="line"></div><div class="line">        grid.addWidget(title, <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(titleEdit, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">        grid.addWidget(author, <span class="number">2</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(authorEdit, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">        grid.addWidget(review, <span class="number">3</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(reviewEdit, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>)</div><div class="line">        </div><div class="line">        self.setLayout(grid) </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Review'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grid = QGridLayout()</div><div class="line">grid.setSpacing(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>创建grid layout 并设置widgets 间距离spacing</p>
<p>grid.addWidget(reviewEdit, 3, 1, 5, 1)</p>
<p>设置 reviewEdit 位于第三行，第一列，占5行，1列。</p>
<p><img src="/images/PyQt/PyQt5_4_4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文出处:&lt;/em&gt; &lt;a href=&quot;http://zetcode.com/gui/pyqt5/layout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zetcode.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;布局管理是GUI 编程一个重要的方面。
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-3 PyQt5 的菜单、工具栏【Menus and toolbars in PyQt5】</title>
    <link href="http://dandan32.github.io/2017/03/24/PyQt5_3/"/>
    <id>http://dandan32.github.io/2017/03/24/PyQt5_3/</id>
    <published>2017-03-24T07:45:11.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文出处:</em> <a href="http://zetcode.com/gui/pyqt5/menustoolbars/" target="_blank" rel="external">zetcode.com</a>  </p>
<p>这一部分将会介绍如何创建菜单、工具栏。 菜单是一组命令的集合，以菜单栏的形式展现。工具栏带有应用的一些命令的按钮。</p>
<h1 id="主窗口【Main-Window】"><a href="#主窗口【Main-Window】" class="headerlink" title="主窗口【Main Window】"></a>主窗口【Main Window】</h1><p>QMainWindow类提供了应用主窗口，能够用于创建典型的具有状态栏、工具栏和菜单栏的应用模式。</p>
<h1 id="状态栏【Statusbar】"><a href="#状态栏【Statusbar】" class="headerlink" title="状态栏【Statusbar】"></a>状态栏【Statusbar】</h1><p>状态栏是用于显示状态信息的部件(widget)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program creates a statusbar.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        self.statusBar().showMessage(<span class="string">'Ready'</span>)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Statusbar'</span>)    </div><div class="line">        self.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>状态栏在QMainWindow下创建。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.statusBar().showMessage(<span class="string">'Ready'</span>)</div></pre></td></tr></table></figure></p>
<p>通过调用QtGui.QMainWindow的statusBar()方法获得状态栏，首次调用将创建一个状态栏，后续的调用会返回状态栏对象。showMessage() 方法在状态栏显示消息。</p>
<p><img src="/images/PyQt/PyQt5_3_1.png" alt=""></p>
<h1 id="菜单栏-【Menubar】"><a href="#菜单栏-【Menubar】" class="headerlink" title="菜单栏 【Menubar】"></a>菜单栏 【Menubar】</h1><p>菜单栏是常用的GUI应用部分。它包含一组的不同的命令菜单（Mac 的菜单栏有点不同）。为了获得相似的效果，可以使用此方法menubar.setNativeMenuBar(False)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program creates a menubar. The</div><div class="line">menubar has one menu with an exit action.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QAction, qApp, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        exitAction = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'&amp;Exit'</span>, self)        </div><div class="line">        exitAction.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAction.setStatusTip(<span class="string">'Exit application'</span>)</div><div class="line">        exitAction.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        self.statusBar()</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        menubar.setNativeMenuBar(<span class="keyword">False</span>)</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'&amp;File'</span>)</div><div class="line">        fileMenu.addAction(exitAction)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Menubar'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>上面的例子中，新建一个带有菜单的菜单栏。菜单包括一个终止应用的action。同时也新建一个状态栏。action可以通过Ctrl+Q 快捷键触发。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exitAction = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'&amp;Exit'</span>, self)        </div><div class="line">exitAction.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">exitAction.setStatusTip(<span class="string">'Exit application'</span>)</div></pre></td></tr></table></figure>
<p>QAction 是菜单栏、工具栏上操作的抽象，可以自定义快捷键。上面的代码创建一个具有图标、“Exit”标签、与快捷键的action。第三行设置状态提示，当鼠标悬停在菜单项上时就会触发。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exitAction.triggered.connect(qApp.quit)</div></pre></td></tr></table></figure>
<p>当选择特定的action，触发特定的 signal，此 signal 与 QApplication widget的quit() 方法连接，会使应用退出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">menubar = self.menuBar()</div><div class="line">fileMenu = menubar.addMenu(<span class="string">'&amp;File'</span>)</div><div class="line">fileMenu.addAction(exitAction)</div></pre></td></tr></table></figure>
<p>menuBar() 方法创建菜单栏，上面代码中创建了一个 file 菜单，与一个 exitAction 操作。</p>
<p><img src="/images/PyQt/PyQt5_3_2.png" alt=""><br><img src="/images/PyQt/PyQt5_3_3.png" alt="">  </p>
<h1 id="工具栏-Toolbar"><a href="#工具栏-Toolbar" class="headerlink" title="工具栏 Toolbar"></a>工具栏 Toolbar</h1><p>应用中的所有命令成组的方式放置于菜单中。 工具栏提供了快速访问常用命令的方式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial</div><div class="line"></div><div class="line">This program creates a toolbar.</div><div class="line">The toolbar has one action, which</div><div class="line">terminates the application, if triggered.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com</div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QAction, qApp, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line"></div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        exitAction = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'Exit'</span>, self)</div><div class="line">        exitAction.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAction.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        self.toolbar = self.addToolBar(<span class="string">'Exit'</span>)</div><div class="line">        self.toolbar.addAction(exitAction)</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Toolbar'</span>)</div><div class="line">        self.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>上述例子，创建简单的工具栏（带有一个退出action）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exitAction = QAction(QIcon(<span class="string">'exit24.png'</span>), <span class="string">'Exit'</span>, self)</div><div class="line">exitAction.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">exitAction.triggered.connect(qApp.quit)</div></pre></td></tr></table></figure>
<p>类似于上述的菜单栏，创建 action 对象（具有标签、图标、快捷键），triggered 信号连接到 exit()方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.toolbar = self.addToolBar(<span class="string">'Exit'</span>)</div><div class="line">self.toolbar.addAction(exitAction)</div></pre></td></tr></table></figure>
<p>创建工具栏。</p>
<p><img src="/images/PyQt/PyQt5_3_4.png" alt=""></p>
<h1 id="集成到一起-Putting-it-together"><a href="#集成到一起-Putting-it-together" class="headerlink" title="集成到一起 Putting it together"></a>集成到一起 Putting it together</h1><p>在本节的最后一个例子中，展示一个带有菜单栏、工具栏、状态栏和 中央widget 的应用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program creates a skeleton of</div><div class="line">a classic GUI application with a menubar,</div><div class="line">toolbar, statusbar, and a central widget. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QTextEdit, QAction, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        textEdit = QTextEdit()</div><div class="line">        self.setCentralWidget(textEdit)</div><div class="line"></div><div class="line">        exitAction = QAction(QIcon(<span class="string">'exit24.png'</span>), <span class="string">'Exit'</span>, self)</div><div class="line">        exitAction.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAction.setStatusTip(<span class="string">'Exit application'</span>)</div><div class="line">        exitAction.triggered.connect(self.close)</div><div class="line"></div><div class="line">        self.statusBar()</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'&amp;File'</span>)</div><div class="line">        fileMenu.addAction(exitAction)</div><div class="line"></div><div class="line">        toolbar = self.addToolBar(<span class="string">'Exit'</span>)</div><div class="line">        toolbar.addAction(exitAction)</div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">250</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Main window'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<p>此例子创建了经典的带有菜单栏、工具栏、状态栏的GUI应用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">textEdit = QTextEdit()</div><div class="line">self.setCentralWidget(textEdit)</div></pre></td></tr></table></figure>
<p>文本编辑控件，处于窗口中心。<br><img src="/images/PyQt/PyQt5_3_5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文出处:&lt;/em&gt; &lt;a href=&quot;http://zetcode.com/gui/pyqt5/menustoolbars/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zetcode.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;这一部分将会介绍如何创建
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-2 第一个程序 【First programs】</title>
    <link href="http://dandan32.github.io/2017/03/21/PyQt5_2/"/>
    <id>http://dandan32.github.io/2017/03/21/PyQt5_2/</id>
    <published>2017-03-21T04:58:40.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文出处:</em> <a href="http://zetcode.com/gui/pyqt5/firstprograms/" target="_blank" rel="external">zetcode.com</a>  </p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>该例子显示一个小窗口。可以利用这个窗口完成很多事情，比如调整大小、最大化、最小化。而这需要大量的代码。已经内置了此部分代码，因为此部分代码在大多数程序中都需要使用，不需要重复编码此部分功能。PyQt5是一个高级的工具集，如果使用低级别的工具集开发编码，以下的例子很可能产生上百行代码。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">In this example, we create a simple</div><div class="line">window in PyQt5.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line"></div><div class="line">    w = QWidget()</div><div class="line">    w.resize(<span class="number">250</span>, <span class="number">150</span>)</div><div class="line">    w.move(<span class="number">300</span>, <span class="number">300</span>)</div><div class="line">    w.setWindowTitle(<span class="string">'Simple'</span>)</div><div class="line">    w.show()</div><div class="line">    </div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>上面代码展示一个小窗口  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</div></pre></td></tr></table></figure>
<p>导入必要的模块。基本的小部件在<strong>PyQt5.QtWidgets</strong> 模块中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app = QApplication(sys.argv)</div></pre></td></tr></table></figure>
<p>每个<strong>PyQt5</strong> 应用必须创建一个<strong>application</strong> 对象。<strong>sys.argv</strong> 参数是命令行参数的列表。<strong>Python</strong> 脚本可以从<strong>shell</strong>运行，通过这种方式可以控制脚本的启动方式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w = QWidget()</div></pre></td></tr></table></figure></p>
<p><strong>QWidget</strong> 部件是<strong>PyQt5</strong>中所有用户界面对象的基类。我们提供了默认的<strong>QWidget</strong>构造器，默认的构造器没有父级元素。（没有父级元素的部件称为窗口）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w.resize(<span class="number">250</span>, <span class="number">150</span>)</div></pre></td></tr></table></figure></p>
<p><strong>resize()</strong> 方法调整部件的大小. 宽度：250px； 高度：150px<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w.move(<span class="number">300</span>, <span class="number">300</span>)</div></pre></td></tr></table></figure></p>
<p><strong>move()</strong>把部件移动到坐标为（300，300）处。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w.setWindowTitle(<span class="string">'Simple'</span>)</div></pre></td></tr></table></figure></p>
<p>设置窗口的标题。表示在标题栏展示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w.show()</div></pre></td></tr></table></figure></p>
<p><strong>show()</strong>在窗口上显示部件。部件首先在内存中创建，然后在屏幕上展示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<p>最后，进入应用主循环。事件处理从此调用开始。主循环从窗口系统接收事件、把分发事件到应用部件。当<strong>exit()</strong>调用或主部件销毁即引发主循环结束。<strong>sys.exit()</strong> 方法确保干净的退出，通知系统应用如何退出。</p>
<p><strong>exec_()</strong> 方法包含一个下划线。 因为exec 是Python的关键字,因此使用<strong>exec_()</strong>代替。<br><img src="/images/PyQt/PyQt5_2_1.png" alt=""></p>
<h1 id="应用程序图标-application-icon"><a href="#应用程序图标-application-icon" class="headerlink" title="应用程序图标  (application icon)"></a>应用程序图标  (application icon)</h1><p>应用图标是标题栏左上角显示的小图像，接下来的例子会教大家如何在PyQt5中实现应用图标，顺带介绍一些新的方法调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows an icon</div><div class="line">in the titlebar of the window.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">220</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Icon'</span>)</div><div class="line">        self.setWindowIcon(QIcon(<span class="string">'./image/web.png'</span>))        </div><div class="line">    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="/images/PyQt/PyQt5_2_2.png" alt=""></p>
<h1 id="提示-（Tooltip）"><a href="#提示-（Tooltip）" class="headerlink" title="提示 （Tooltip）"></a>提示 （Tooltip）</h1><p>对每一个部件可以提供一个帮助提示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This example shows a tooltip on </div><div class="line">a window and a button.</div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QToolTip, </div><div class="line">    QPushButton, QApplication)</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont    </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        QToolTip.setFont(QFont(<span class="string">'SansSerif'</span>, <span class="number">10</span>))</div><div class="line">        </div><div class="line">        self.setToolTip(<span class="string">'This is a &lt;b&gt;QWidget&lt;/b&gt; widget'</span>)</div><div class="line">        </div><div class="line">        btn = QPushButton(<span class="string">'Button'</span>, self)</div><div class="line">        btn.setToolTip(<span class="string">'This is a &lt;b&gt;QPushButton&lt;/b&gt; widget'</span>)</div><div class="line">        btn.resize(btn.sizeHint())</div><div class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)       </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Tooltips'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure></p>
<p>本例中展现了如何为PyQt5 部件添加 tooltip。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QToolTip.setFont(QFont(<span class="string">'SansSerif'</span>, <span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>此静态方法设置tooltop渲染的字体，这里使用了SansSerif字体,大小为10px。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.setToolTip(&apos;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&apos;)</div></pre></td></tr></table></figure>
<p>使用setToolTip 设置 tooltip， 可以使用富文本格式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btn = QPushButton(<span class="string">'Button'</span>, self)</div><div class="line">btn.setToolTip(<span class="string">'This is a &lt;b&gt;QPushButton&lt;/b&gt; widget'</span>)</div></pre></td></tr></table></figure>
<p>添加push button 部件，及为push button 设置tooltip。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btn.resize(btn.sizeHint())</div><div class="line">btn.move(<span class="number">50</span>, <span class="number">50</span>)</div></pre></td></tr></table></figure>
<p>button 在窗口中重新设置大小、移动位置。 sizeHint() 使得 button 能够获得一个推荐适当的大小。</p>
<p><img src="/images/PyQt/PyQt5_2_3.png" alt=""><br>Figure: Tooltip</p>
<h1 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h1><p>关闭窗口最明显的方式就是“点击标题栏的x标记”。在下一个例子中，我们会展示如何通过编码的方式关闭窗口。我们会开始接触到signals(信号)和 slots(槽) 。</p>
<p>下面是QPushButton 部件的构造函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QPushButton(string text, QWidget parent = <span class="keyword">None</span>)</div></pre></td></tr></table></figure></p>
<p>text 参数是button上显示的文本。parent 是放置 button 的部件(widget). 在本例中他就是一个QWidget。应用中的Widegets形成层次结构，大多数Widget都有其parent，没有parent的Widgets是顶层的窗口.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program creates a quit</div><div class="line">button. When we press the button,</div><div class="line">the application terminates. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        qbtn = QPushButton(<span class="string">'Quit'</span>, self)</div><div class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</div><div class="line">        qbtn.resize(qbtn.sizeHint())</div><div class="line">        qbtn.move(<span class="number">50</span>, <span class="number">50</span>)       </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Quit button'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>此例中，创建了一个退出按钮，点击按钮，程序即退出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</div></pre></td></tr></table></figure></p>
<p>需要导入QtCore中的包</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qbtn = QPushButton(<span class="string">'Quit'</span>, self)</div></pre></td></tr></table></figure>
<p>我们新建了一个QPushButton的实例。构造函数的第一个参数是按钮的标签，第二个参数是widget的parent。此处的parent是继承的QWidget对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qbtn.clicked.connect(QCoreApplication.instance().quit)</div></pre></td></tr></table></figure>
<p>PyQt5的事件处理系统构建与 signal 和 slot 机制之上。如果我们点击按钮，信号就会被激发。slot 可以是一个Qt槽、或者python 可调用对象。QCoreApplication 包括一个主事件循环（处理和分发事件循环）；instance()方法返回一个当前实例。注意：QCoreApplication 是与 QApplication 一起创建的。clicked信号连接到quit()方法【quit方法用于结束应用】。接收者（push button）和发送者（application object）中负责互相通讯。</p>
<p><img src="/images/PyQt/PyQt5_2_4.png" alt=""></p>
<h1 id="消息框（Message-Box）"><a href="#消息框（Message-Box）" class="headerlink" title="消息框（Message Box）"></a>消息框（Message Box）</h1><p>默认情况下，如果点击标题栏的关闭按钮（x），QWidget 将被关闭。在某些情况下需要对这种行为进行修改，比如：编辑器中有仍未保存的被修改的文件，应该在关闭时出现一个确认行为。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program shows a confirmation </div><div class="line">message box when we click on the close</div><div class="line">button of the application window. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QMessageBox, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)        </div><div class="line">        self.setWindowTitle(<span class="string">'Message box'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        </div><div class="line">        reply = QMessageBox.question(self, <span class="string">'Message'</span>,</div><div class="line">            <span class="string">"Are you sure to quit?"</span>, QMessageBox.Yes | </div><div class="line">            QMessageBox.No, QMessageBox.No)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</div><div class="line">            event.accept()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.ignore()        </div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>当关闭此QWidget时，触发QCloseEvent事件，通过重写closeEvent()事件控制方法修改默认的关闭行为。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reply = QMessageBox.question(self, <span class="string">'Message'</span>,</div><div class="line">    <span class="string">"Are you sure to quit?"</span>, QMessageBox.Yes | </div><div class="line">    QMessageBox.No, QMessageBox.No)</div></pre></td></tr></table></figure></p>
<p>显示一个带有两个按钮的消息框（yes 和 no）。第一个 字符串 参数在标题栏显示。第二个 字符串 参数是在对话框中显示的，第三个参数定义了出现在消息框中的按钮。最后一个参数定义默认的按钮。返回值传递给reply。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> reply == QtGui.QMessageBox.Yes:</div><div class="line">    event.accept()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    event.ignore()</div></pre></td></tr></table></figure>
<p>此处根据返回值判断是否关闭窗口，点击“yes”即接受事件，关闭widget和终止应用。否者，忽视此事件。</p>
<p><img src="/images/PyQt/PyQt5_2_5.png" alt=""></p>
<h1 id="屏幕居中（centering-window-on-the-screen）"><a href="#屏幕居中（centering-window-on-the-screen）" class="headerlink" title="屏幕居中（centering window on the screen）"></a>屏幕居中（centering window on the screen）</h1><p>此例展示如何在屏幕居中显示应用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">ZetCode PyQt5 tutorial </div><div class="line"></div><div class="line">This program centers a window </div><div class="line">on the screen. </div><div class="line"></div><div class="line">author: Jan Bodnar</div><div class="line">website: zetcode.com </div><div class="line">last edited: January 2015</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QDesktopWidget, QApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        </div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>               </div><div class="line">        </div><div class="line">        self.resize(<span class="number">250</span>, <span class="number">150</span>)</div><div class="line">        self.center()</div><div class="line">        </div><div class="line">        self.setWindowTitle(<span class="string">'Center'</span>)    </div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        qr = self.frameGeometry()</div><div class="line">        cp = QDesktopWidget().availableGeometry().center()</div><div class="line">        qr.moveCenter(cp)</div><div class="line">        self.move(qr.topLeft())</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>QtGui.QDesktopWidget 类提供了用户桌面的相关信息，包括桌面尺寸。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.center()</div></pre></td></tr></table></figure>
<p>此方法实现了将程序移到屏幕的中央。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qr = self.frameGeometry()</div></pre></td></tr></table></figure>
<p>获得主窗口的方框描述，包括了任何窗口框。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp = QDesktopWidget().availableGeometry().center()</div></pre></td></tr></table></figure>
<p>获得屏幕geometry，通过geometry获得屏幕的中心位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qr.moveCenter(cp)</div></pre></td></tr></table></figure>
<p>将窗口的中心位置移动到屏幕的中心，窗口的大小并不发生变化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.move(qr.topLeft())</div></pre></td></tr></table></figure>
<p>移动窗口的左上角到移动到qr的左上角，这样窗口就在屏幕的正中央了。</p>
<p><img src="/images/PyQt/PyQt5_2_6.png" alt=""></p>
<p>这部分介绍了一些基本PyQt5 知识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文出处:&lt;/em&gt; &lt;a href=&quot;http://zetcode.com/gui/pyqt5/firstprograms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zetcode.com&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;简单示例&quot;&gt;&lt;
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-1 简介 【Introduction】</title>
    <link href="http://dandan32.github.io/2017/03/18/PyQt5_1/"/>
    <id>http://dandan32.github.io/2017/03/18/PyQt5_1/</id>
    <published>2017-03-17T16:00:15.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文出处:</em> <a href="http://zetcode.com/gui/pyqt5/introduction/" target="_blank" rel="external">zetcode.com</a>   </p>
<h1 id="关于-PyQt5-【About-PyQt5】"><a href="#关于-PyQt5-【About-PyQt5】" class="headerlink" title="关于 PyQt5  【About PyQt5】"></a>关于 <strong>PyQt5</strong>  【About PyQt5】</h1><p><strong>PyQt5</strong> 是Digia的Qt5应用框架的python绑定实现。在 <strong>Python2</strong> 和 <strong>Python3</strong> 环境下皆可用。本教程使用 <strong>Python3</strong>。<strong>Qt</strong> 是最强大的GUI库之一。<strong>PyQt5</strong>的官方网站是<a href="www.riverbankcomputing.co.uk/news">www.riverbankcomputing.co.uk/news</a>。<strong>PyQt5</strong> 由 Riverbank Computing 开发并维护。</p>
<p><strong>PyQt5</strong> 以一系列<em>Python</em>模块的形式实现，其具有620个以上的类和6000个函数、方法。它是个跨平台的工具集（Unix、windows、mac）。<strong>PyQt5</strong>使用2个发行协议（GPL 和 商业协议）</p>
<h1 id="PyQt5-划分为以下几个模块："><a href="#PyQt5-划分为以下几个模块：" class="headerlink" title="PyQt5 划分为以下几个模块："></a><strong>PyQt5</strong> 划分为以下几个模块：</h1><ul>
<li><strong>QtCore</strong><br>QtCore 模块包含了<em>核心的非GUI功能</em>。此模块用于处理 time、files与 directories、不同的数据类型、流、URLs、mine types、线程或进程。</li>
<li><strong>QtGui</strong><br>QtGui 包括集成的窗口系统、事件处理、2D Graphics、basic imaging、字体、文本。  </li>
<li><strong>QtWidgets</strong><br>QtWidgets 提供基本UI元素（以类的方式）创建典型的桌面用户界面。  </li>
<li><strong>QtMultimedia</strong><br>QtMultimedia 包括处理多媒体内容的类和访问camera、radio功能的Api    </li>
<li><strong>QtBluetook</strong><br>QtBluetooh 模块包括蓝牙的扫描、链接及交互功能   </li>
<li><strong>QtNetwork</strong><br>QtNetwork 模块用于网络编程。此模块实现了TCP/IP 和 UDP 客户端、服务器使得网络编程更加简单和可移植。  </li>
<li><strong>QtPositioning</strong><br>QtPositioning 用于从多种源头获取位置信息；比如 satellite、Wifi、或文本文件。  </li>
<li><strong>Enginio</strong><br>Enginio 提供了client-side library用于访问Qt Cloud Services Managed Application Runtime。  </li>
<li><strong>QtWebSockets</strong><br>QtWebSockets 实现了 WebSocket 协议   </li>
<li><strong>QtWebkit</strong><br>QtWebkit 提供了一个基于WebKit2库的web浏览器实现。  </li>
<li><strong>QtWebkitWidgets</strong><br>QtWebkitWidgets 提供了在QtWidgets应用中使用的基于Webkit1的浏览器。    </li>
<li><strong>QtXml</strong><br>QtXml 用于处理xml文件，此模块提供了基于SAX和DOM 的api  </li>
<li><strong>QtSvg</strong><br>QtSvg 模块用于显示SVG文件。Scalable Vector Graphics (SVG) 是一种用XML描述二维图像、图形应用的语言。  </li>
<li><strong>QtSql</strong><br>QtSQL 用于数据库相关工作。    </li>
<li><strong>QtTest</strong><br>QtTest 用于 PyQt5 应用的单元测试。  </li>
</ul>
<h1 id="PyQt4-和-PyQt5-的区别-【Difference-between-PyQt4-and-PyQt5】"><a href="#PyQt4-和-PyQt5-的区别-【Difference-between-PyQt4-and-PyQt5】" class="headerlink" title="PyQt4 和 PyQt5 的区别  【Difference between PyQt4 and PyQt5】"></a>PyQt4 和 PyQt5 的区别  【Difference between PyQt4 and PyQt5】</h1><p>PyQt5 并不向后兼容（向下兼容）PyQt4; PyQt5 中发生了几大显著变化。然而把旧版本的代码重构到新的库中并不十分困难。PyQt5与PyQt4 的区别具体为：</p>
<ol>
<li><strong>Python</strong> 的模块重新组织。一些模块被丢弃了（比如<strong>QtScript</strong>）,有些被划分到子模块中（比如<strong>QtGui</strong>、 <strong>QtWebKit</strong>）。 引入了新的模块，包括 <strong>QtBluetooth</strong>， <strong>QtPositioning</strong>、<strong>Enginio</strong>。</li>
<li><strong>PyQt5</strong> 只支持新式的“信号-槽”事件处理机制。<strong>SIGNAL()</strong> 和 <strong>SLOT()</strong> 调用不再被支持。</li>
<li><strong>PyQt5</strong> 不再支持任何在<strong>Qt v5.0</strong>被声明为<strong>deprecated</strong>（不提倡使用）或<strong>obsolete</strong>（废弃）的 Qt API。  </li>
</ol>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><div align="center"><br><img src="http://zetcode.com/img/gui/pyqt4/pythonlogo.png" alt=""><br></div><br>Python 是一种高级、动态、通用、跨平台、解释性、面向对象的编程语言。 Python的设计目的是突出程序员的效率和代码可读性。Python最开始由 <strong>Guido van Rossum</strong> 开发，于1991年首次发布。Python受ABC、Haskell、Java、Lisp、Icon、Perl启发。Python 简洁抽象，最直观的特性之一就是其代码使用缩进代替分号和花括号。Python目前有两大分支-Python2.x、Python3.x，Python3.x打破了向后兼容性，其目的是修正存在的设计错误，使得语言更加干净。Python由世界上的志愿者进行维护，它是开源的，Python是学习编程的理想入门语言。</p>
<p>本教程使用Python3.x 版本。</p>
<p>Python支持多种编程类型。它并不规范于特定的范式。Python 支持面向对象 与过程化编程。也提供有限的函数式编程支持。</p>
<p>Python的官方站点是 python.org</p>
<p>Perl、Python、 Ruby 是广泛使用的脚本语言。它们存在诸多相同点；互相竞争。 </p>
<p>本章节是PyQt5 工具集的介绍。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文出处:&lt;/em&gt; &lt;a href=&quot;http://zetcode.com/gui/pyqt5/introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zetcode.com&lt;/a&gt;   &lt;/p&gt;
&lt;h1 id=&quot;关于-PyQt
    
    </summary>
    
      <category term="PyQt5" scheme="http://dandan32.github.io/categories/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://dandan32.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>First Blog</title>
    <link href="http://dandan32.github.io/2017/03/15/hello/"/>
    <id>http://dandan32.github.io/2017/03/15/hello/</id>
    <published>2017-03-15T03:48:00.000Z</published>
    <updated>2017-04-07T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不可避俗的来一句：hello-world"><a href="#不可避俗的来一句：hello-world" class="headerlink" title="不可避俗的来一句：hello world!"></a>不可避俗的来一句：hello world!</h1><p>很想做个人博客，静态博客工具提供了一种很廉价的创建博客方式！<br>在<strong>pelican、hugo、hexo</strong>三者中，我最终选择了hexo 与其中的 next 主题。真的很感谢hexo 与next主题的创建者们！！！！  </p>
<p>原本有想法自己做一个~<br>但是自从看到这么优秀的框架后，就打消了这个念头！！！<br>界面很优秀、很有趣！  </p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>结合github 提供的 pages 服务构建个人网站。<br>简单记录一下配置过程：</p>
<h2 id="安装-node-npm"><a href="#安装-node-npm" class="headerlink" title="安装 node\npm"></a>安装 node\npm</h2><p>这个参考网上教程就好，注意设置环境变量</p>
<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 hexo</span></div><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line"><span class="comment"># 初始化博客</span></div><div class="line">hexo init &lt;博客位置&gt;</div><div class="line">cd &lt;博客位置&gt;</div><div class="line"><span class="comment"># 安装相应依赖</span></div><div class="line">npm install</div><div class="line"><span class="comment"># 本地搜索插件</span></div><div class="line">npm install hexo-generator-searchdb --save</div><div class="line"><span class="comment">#　启动ｈｅｘｏ服务器</span></div><div class="line">hexo server</div></pre></td></tr></table></figure>
<h2 id="安装-next-主题"><a href="#安装-next-主题" class="headerlink" title="安装 next 主题"></a>安装 next 主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;博客位置&gt;</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>注意将 next中的.git 目录删掉，因为之后要用自己的git仓库托管。</p>
<h2 id="hexo-博客设置"><a href="#hexo-博客设置" class="headerlink" title="hexo 博客设置"></a>hexo 博客设置</h2><p>hexo 博客配置文件位于 <em>&lt;博客位置&gt;/_config.yml</em>  </p>
<p>修改以下项目，根据自己需要修改：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">&lt;博客标题&gt;</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">&lt;博客子标题&gt;</span></div><div class="line"><span class="attr">description:</span> <span class="string">&lt;博客描述&gt;</span></div><div class="line"><span class="attr">author:</span> <span class="string">&lt;你的名字&gt;</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="attr">url:</span> <span class="string">&lt;个人博客url&gt;</span></div></pre></td></tr></table></figure></p>
<p>启用next主题<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">next</span></div></pre></td></tr></table></figure></p>
<p>配置git-pages位置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: 设置部署位置，此处使用git-pages服务</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:dandan32/dandan32.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p>
<p>配置本地搜索<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索设置</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post</span></div><div class="line"><span class="attr">  format:</span> <span class="string">html</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">10000</span></div></pre></td></tr></table></figure></p>
<h2 id="主题博客配置"><a href="#主题博客配置" class="headerlink" title="主题博客配置"></a>主题博客配置</h2><p><a href="http://theme-next.iissnan.com/third-party-services.html#search-system" target="_blank" rel="external">参考官方教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;不可避俗的来一句：hello-world&quot;&gt;&lt;a href=&quot;#不可避俗的来一句：hello-world&quot; class=&quot;headerlink&quot; title=&quot;不可避俗的来一句：hello world!&quot;&gt;&lt;/a&gt;不可避俗的来一句：hello world!&lt;/h1
    
    </summary>
    
    
  </entry>
  
</feed>
